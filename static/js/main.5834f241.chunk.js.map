{"version":3,"sources":["Components/Playarea/socketConnect.js","Components/Connect.js","Components/Playarea/Lobby.js","ApiHandler/EndPoints.js","ApiHandler/FetchHandler.js","Components/Responses/Response.js","Components/Playarea/InputQuestion.js","Components/Playarea/AnswerQuestion.js","Components/Playarea/PickFavorite.js","Components/Playarea/Intermission.js","Components/Playarea/Views.js","Components/Error.js","Components/Playarea/Arena.js","Components/Playarea/Header.js","EndGame.js","Components/Playarea.js","Components/Start.js","App.js","Components/Nav.js","serviceWorker.js","index.js"],"names":["socket","baseUrl","Lobby","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","error","gameId","emit","_this2","react_default","a","createElement","react_router","to","players","id","map","player","index","key","className","length","username","starter","style","marginTop","onClick","startGame","src","alt","React","Component","getGameIdUrl","createGameUrl","createPlayerUrl","insertQuestion","insertAnswer","updateScoresUrl","Response","headerClass","status","header","message","image","author","source","InputQuestion","handleChange","e","change","target","value","setState","insertQuestionIntoDb","question","data","cb","fetch","endpoint","method","body","JSON","stringify","then","res","catch","createQuestion","userId","success","valid","addBlank","b","blank","slice","newText","concat","json","type","rows","maxLength","onChange","placeholder","fontWeight","resheader","resMessage","Response_Response","AnswerQuestion","insertAnsIntoDb","answer","createAnswer","response","PickFavorite","handleFaveClick","owner","updateScores","_this3","answersWithoutUser","answers","filter","ans","AfterInputQuestionIntermission","Intermission_IntermissionTemplate","AfterAnswersIntermission","AfterPickFaveIntermission","NextRoundIntermission","BeforeFinalResults","IntermissionTemplate","anims","Math","floor","random","RoundResults","answersOrdered","sort","parseInt","score","playersOrdered","splice","bucketSize","FinalResults","highScore","winners","p","includes","Error","Arena","view","playState","InputQuestion_InputQuestion","Intermission_AfterInputQuestionIntermission","AnswerQuestion_AnswerQuestion","Intermission_AfterAnswersIntermission","PickFavorite_PickFavorite","Intermission_AfterPickFaveIntermission","Views_RoundResults","Intermission_NextRoundIntermission","Intermission_BeforeFinalResults","Error_Error","role","class","timer","Header","backgroundColor","react_router_dom","EndGame","playAgain","Views_FinalResults","Playarea","handleStart","location","gameState","lsPlayersCB","timerCB","gameStateCB","t","gs","socketIOClient","on","pData","gsVal","paths","window","pathname","split","gId","trim","Lobby_Lobby","Arena_Arena","EndGame_EndGame","Header_Header","blankGameIdMsg","Start","getGid","getGameIdError","new","loadingGameID","join","loadingPlay","url","toLowerCase","gameIdIsInvalid","gIdInvalidMsg","redirectToPlayarea","usernameIsInvalid","Start_Button","Start_InputArea","title","disabled","invalid","invalidMessage","Button","children","InputArea","autoComplete","App","Start_Start","Nav","path","exact","component","Boolean","hostname","match","ReactDOM","render","Nav_Nav","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gLAGIA,uGCFEC,EAAiB,4CCGFC,cACjB,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAO,GAHGR,mFFMtB,IAAoBS,IEEDN,KAAKJ,MAAMU,OFD1Bb,EAAOc,KAAK,cAAe,CAACD,OAAQA,qCEI5B,IAAAE,EAAAR,KACJ,GAAGA,KAAKI,MAAMC,MAAQ,OAAOI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,WAG1C,IAAMC,EAAUd,KAAKJ,MAAMkB,SAAW,GACtC,OACIL,EAAAC,EAAAC,cAAA,OAAKI,GAAG,mBACJN,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,qCACCG,EAAQE,IAAI,SAACC,EAAQC,GAAT,OACbT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKF,EAAOF,IACbN,EAAAC,EAAAC,cAAA,MACIS,UAAYF,IAAQJ,EAAQO,OAAO,GAAM,uBACxCJ,EAAOK,aAEftB,KAAKJ,MAAM2B,SACZd,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CAACC,UAAU,QACnBhB,EAAAC,EAAAC,cAAA,MAAIS,UAAU,iCAAd,+CAGAX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iCACXX,EAAAC,EAAAC,cAAA,UACIe,QAAS,kBAAMlB,EAAKZ,MAAM+B,UAAU,mBACpCP,UAAU,wBAFd,+CAORX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACXX,EAAAC,EAAAC,cAAA,OACIiB,IAAI,4DACJC,IAAI,QACJT,UAAU,uBA5CCU,IAAMC,WCHnCrC,EAAiB,uCACjBsC,EAAe,kBACfC,EAAgB,sBAChBC,EAAkB,qBCDlBC,EAAiB,uBACjBC,EAAe,qBACfC,EAAkB,qBCHxB,IAAMC,EAAW,SAAC1C,GACd,IAAM2C,EAAc3C,EAAM4C,OAAS,eAAiB,cAC9ChB,EAAQ,mBACd,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,MAAIS,UAAWmB,GAAc3C,EAAM6C,UAErC7C,EAAM4C,QAAU/B,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GAC9Bf,EAAAC,EAAAC,cAAA,UAAKf,EAAM8C,UAEfjC,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,MAAIS,UAAU,2BAAd,kCAIHxB,EAAM+C,OAASlC,EAAAC,EAAAC,cAAA,WACZF,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,OACIiB,IAAKhC,EAAM+C,MACXd,IAAI,QACJT,UAAU,eAElBX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,cACTX,EAAAC,EAAAC,cAAA,oBAAYf,EAAMgD,OAAlB,OAA8BhD,EAAMiD,YCrBnCC,cACjB,SAAAA,EAAYlD,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACdjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KAQVmD,aAAe,SAACC,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOnC,IAAMiC,EAAEE,OAAOC,MAC/BF,EAAM,OAAY,EAClBpD,EAAKuD,SAASH,IAbApD,EAgBlBwD,qBAAuB,WACfxD,EAAKO,MAAMkD,SFYvB,SAAwBC,EAAMC,GAC1BC,MAAMC,EAASvB,EAAgB,CACvBwB,OAAS,OACTC,KAAQC,KAAKC,UAAUP,KAEtBQ,KAAK,SAAAC,GACc,MAAbA,EAAIxB,OACHgB,GAAG,GACEA,GAAG,KAEfS,MAAM,kBAAMT,GAAG,KEbpBU,CALa,CACT5D,OAAOT,EAAKD,MAAMU,OAClBgD,SAASzD,EAAKO,MAAMkD,SACpBa,OAAOtE,EAAKD,MAAMuE,QAED,SAAAH,GAAG,OAAInE,EAAKuD,SAAS,CAACgB,QAAQJ,MAR/CnE,EAAKuD,SAAS,CAACiB,OAAM,KAlBXxE,EA6BlByE,SAAW,WACP,IAAMC,EAAI,SACV,GAAgC,IAA7B1E,EAAKO,MAAMkD,SAASjC,OACnBxB,EAAKuD,SAAS,CAACE,SAASiB,QACvB,CACD,IAAMC,EAA2C,MAAlC3E,EAAKO,MAAMkD,SAASmB,OAAO,GAAcF,EAAK,IAAMA,EAC7DG,EAAU7E,EAAKO,MAAMkD,SAASkB,EACpC3E,EAAKuD,SAAS,CAACE,SAAUoB,MAlC7B7E,EAAKO,MAAQ,CACTkD,SAAU,GACVe,OAAO,EACPD,QAAS,MALCvE,mFAwCC,IAAAW,EAAAR,KACTuD,EAAO,CACTjD,OAAQN,KAAKJ,MAAMU,OACnB6D,OAAQnE,KAAKJ,MAAMuE,QAEvBV,MAAK,GAAAkB,OAAIjF,EAAJ,mBAA8B,CAC/BiE,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KAExBQ,KAAK,SAAAC,GAAG,OAAIA,EAAIY,SAChBb,KAAK,SAAAR,GAAI,OAAIA,EAAI,UAAgB/C,EAAK4C,SAAS,CAACgB,SAAQ,MACxDH,MAAM,kBAAMzD,EAAK4C,SAAS,CAACgB,SAAQ,uCAIpC,GAAwB,OAArBpE,KAAKI,MAAMgE,QACV,OACI3D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iCACXX,EAAAC,EAAAC,cAAA,oDAEJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACII,GAAG,WACH8D,KAAK,OACLC,KAAK,IACLC,UAAU,MACV5B,MAAOnD,KAAKI,MAAMkD,SAClB0B,SAAUhF,KAAK+C,aACfkC,YAAY,sBACZ7D,UAAWpB,KAAKI,MAAMiE,MAAQ,eAAiB,0BAC/C7C,MAAO,CAAC0D,WAAW,WACrBlF,KAAKI,MAAMiE,OAAS5D,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBAAf,mCAI1BX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,uCACXX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,yBAAyBM,QAAS1B,KAAKqD,sBAAzD,gBAGA5C,EAAAC,EAAAC,cAAA,UAAQS,UAAU,yBAAyBM,QAAS1B,KAAKsE,UAAzD,eAQZ,IAAMa,EAAYnF,KAAKI,MAAMgE,QAAU,WAAa,YAC9CgB,EAAapF,KAAKI,MAAMgE,QAAU,GAAK,2CAC7C,OACI3D,EAAAC,EAAAC,cAAC0E,EAAD,CACI7C,OAAQxC,KAAKI,MAAMgE,QACnB3B,OAAQ0C,EACRzC,QAAS0C,EACTzC,MAAM,4DACNC,OAAO,cACPC,OAAO,iBAlGgBf,IAAMC,WCC5BuD,cACjB,SAAAA,EAAY1F,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsF,IACdzF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwF,GAAAnF,KAAAH,KAAMJ,KAQVmD,aAAe,SAACC,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOnC,IAAMiC,EAAEE,OAAOC,MAC/BF,EAAM,OAAY,EAClBpD,EAAKuD,SAASH,IAbApD,EAgBlB0F,gBAAkB,WACV1F,EAAKO,MAAMoF,OHwBvB,SAAsBjC,EAAMC,GACxBC,MAAMC,EAAStB,EAAc,CACzBuB,OAAS,OACTC,KAAQC,KAAKC,UAAUP,KAEtBQ,KAAK,SAAAC,GACc,MAAbA,EAAIxB,OACHgB,GAAG,GACEA,GAAG,KAEfS,MAAM,kBAAMT,GAAG,KGzBhBiC,CALa,CACTnF,OAAQT,EAAKD,MAAMU,OACnBkF,OAAQ3F,EAAKO,MAAMoF,OACnBrB,OAAQtE,EAAKD,MAAMuE,QAEJ,SAAAuB,GAAQ,OAAI7F,EAAKuD,SAAS,CAACgB,QAAQsB,MARlD7F,EAAKuD,SAAS,CAACiB,OAAM,KAhBzBxE,EAAKO,MAAQ,CACToF,OAAQ,GACRnB,OAAO,EACPD,QAAS,MALCvE,mFA6BC,IAAAW,EAAAR,KACTuD,EAAO,CACTjD,OAAQN,KAAKJ,MAAMU,OACnB6D,OAAQnE,KAAKJ,MAAMuE,QAEvBV,MAAK,GAAAkB,OAAIjF,EAAJ,mBAA8B,CAC/BiE,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KAExBQ,KAAK,SAAAC,GAAG,OAAIA,EAAIY,SAChBb,KAAK,SAAAR,GAAI,OAAIA,EAAI,UAAgB/C,EAAK4C,SAAS,CAACgB,SAAQ,MACxDH,MAAM,kBAAMzD,EAAK4C,SAAS,CAACgB,SAAQ,uCAKpC,GAAwB,OAArBpE,KAAKI,MAAMgE,QACV,OACI3D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,UAAKX,KAAKJ,MAAM0D,WAEpB7C,EAAAC,EAAAC,cAAA,OAAKS,UAPL,sCAQIX,EAAAC,EAAAC,cAAA,YACII,GAAG,SACH8D,KAAK,OACLC,KAAK,IACLC,UAAU,MACV5B,MAAOnD,KAAKI,MAAMoF,OAClBR,SAAUhF,KAAK+C,aACfkC,YAAY,oBACZ7D,UAAWpB,KAAKI,MAAMiE,MAAQ,eAAiB,0BAC/C7C,MAAO,CAAC0D,WAAW,WACrBlF,KAAKI,MAAMiE,OAAS5D,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBAAf,mCAI1BX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,yBAAyBM,QAAS1B,KAAKuF,iBAAzD,sBAQZ,IAAMJ,EAAYnF,KAAKI,MAAMgE,QAAU,WAAa,YAC9CgB,EAAapF,KAAKI,MAAMgE,QAAU,GAAK,6CAC7C,OACI3D,EAAAC,EAAAC,cAAC0E,EAAD,CACI7C,OAAQxC,KAAKI,MAAMgE,QACnB3B,OAAQ0C,EACRzC,QAAS0C,EACTzC,MAAM,6DACNC,OAAO,eACPC,OAAO,iBArFiBf,IAAMC,WCA7B4D,cACjB,SAAAA,EAAY/F,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2F,IACd9F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6F,GAAAxF,KAAAH,KAAMJ,KAMVgG,gBAAkB,SAACC,IJQvB,SAAsBtC,EAAMC,GACxBC,MAAMC,EAASrB,EAAiB,CACxBsB,OAAS,OACTC,KAAQC,KAAKC,UAAUP,KAEtBQ,KAAK,SAAAC,GACc,MAAbA,EAAIxB,OACHgB,GAAG,GACEA,GAAG,KAEfS,MAAM,kBAAMT,GAAG,KIbpBsC,CAJa,CACTxF,OAAQT,EAAKD,MAAMU,OACnB6D,OAAQ0B,GAEQ,SAAA7B,GAAG,OAAInE,EAAKuD,SAAS,CAACgB,QAAQJ,OAVlDnE,EAAKO,MAAQ,CACTgE,QAAS,MAHCvE,mFAeC,IAAAW,EAAAR,KACTuD,EAAO,CACTjD,OAAQN,KAAKJ,MAAMU,OACnB6D,OAAQnE,KAAKJ,MAAMuE,QAEvBV,MAAK,GAAAkB,OAAIjF,EAAJ,mBAA8B,CAC/BiE,OAAQ,OACRC,KAAMC,KAAKC,UAAUP,KAExBQ,KAAK,SAAAC,GAAG,OAAIA,EAAIY,SAChBb,KAAK,SAAAR,GAAI,OAAIA,EAAI,UAAgB/C,EAAK4C,SAAS,CAACgB,SAAQ,MACxDH,MAAM,kBAAMzD,EAAK4C,SAAS,CAACgB,SAAQ,uCAGhC,IAAA2B,EAAA/F,KACEgG,EAAqBhG,KAAKJ,MAAMqG,QAAQC,OAAO,SAAAV,GAAM,OAAIA,EAAOK,QAAQE,EAAKnG,MAAMuE,SAEzF,GAAwB,OAArBnE,KAAKI,MAAMgE,QACV,OACI3D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIS,UAAU,QACTpB,KAAKJ,MAAM0D,UAEhB7C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACV4E,EAAmBhF,IAAI,SAAAmF,GAAG,OACvB1F,EAAAC,EAAAC,cAAA,UACIQ,IAAKgF,EAAIN,MACTzE,UAAU,4CACVM,QAAS,kBAAMqE,EAAKH,gBAAgBO,EAAIN,SACnCM,EAAIX,YAQ7B,IAAML,EAAYnF,KAAKI,MAAMgE,QAAU,WAAa,YAC9CgB,EAAapF,KAAKI,MAAMgE,QAAU,sCAAwC,yCAChF,OACI3D,EAAAC,EAAAC,cAAC0E,EAAD,CACI7C,OAAQxC,KAAKI,MAAMgE,QACnB3B,OAAQ0C,EACRzC,QAAS0C,EACTzC,MAAM,4DACNC,OAAO,YACPC,OAAO,iBA9Def,IAAMC,WCH1CqE,EAAiC,SAACxG,GACpC,OACIa,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,OAAO,kBACPmB,KAAK,0BAIX0C,EAA2B,SAAC1G,GAC9B,OACIa,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,OAAO,sBACPmB,KAAK,oBAIX2C,EAA4B,SAAC3G,GAC/B,OACIa,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,OAAO,qCAIb+D,EAAwB,SAAC5G,GAC3B,OACIa,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,OAAO,+BACPE,MAAM,gEAIZ8D,EAAqB,SAAC7G,GACxB,OACIa,EAAAC,EAAAC,cAAC0F,EAAD,CACI5D,OAAO,gCACPE,MAAM,2DAIZ+D,EAAuB,SAAC9G,GAE1B,IAAM4B,EAAQ,mBACRmF,EAAQ,CACV,YACA,gBACA,gBACA,cACA,eACA,WACA,kBACA,mBACA,aACA,eACA,eACA,gBACA,UACA,YACA,cACA,cACA,eACA,SAGJ,OACIlG,EAAAC,EAAAC,cAAA,WACKf,EAAM6C,QACHhC,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,MAAIS,UAAS,YAAAuD,OAAcgC,EAAMC,KAAKC,MAAMD,KAAKE,SAASH,EAAMtF,SAAnD,wBAAmFzB,EAAM6C,SAE7G7C,EAAMgE,MACHnD,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,UAAKf,EAAMgE,OAElBhE,EAAM+C,OACHlC,EAAAC,EAAAC,cAAA,OAAKS,UAAWI,GACZf,EAAAC,EAAAC,cAAA,OACIiB,IAAKhC,EAAM+C,MACXd,IAAI,QACJT,UAAU,iBC9E5B2F,EAAe,SAACnH,GAClB,IAAMoH,EAAiBpH,EAAMqG,QAAQgB,KAAK,SAACvG,EAAG6D,GAAJ,OAAU2C,SAAS3C,EAAE4C,OAASD,SAASxG,EAAEyG,SAC7EC,EAAiBxH,EAAMkB,QAAQmG,KAAK,SAACvG,EAAE6D,GAAH,OAAS2C,SAAS3C,EAAE4C,OAASD,SAASxG,EAAEyG,SAC5ER,EAAQ,CAAC,eAAgB,eAAgB,gBAAiB,cAC7DA,EAAMtF,OAAS2F,EAAe3F,QAC7BsF,EAAMU,OAAOL,EAAe3F,QAEhC,IAAMiG,EAAaN,EAAe3F,OAAOsF,EAAMtF,OAE/C,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIS,UAAU,QAAQxB,EAAM0D,UAC5B7C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,cAAd,oBACC4F,EAAehG,IAAI,SAACwE,EAAQtE,GAAT,OAChBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKqE,EAAOK,MAAOzE,UAAS,qEAAAuD,OACKgC,EAAMC,KAAKC,MAAM3F,EAAMoG,IAD5B,oEAAA3C,OAEWiC,KAAKC,OAAOG,EAAe3F,OAAOH,EAAM,GAAGoG,GAFtD,mGAI7B7G,EAAAC,EAAAC,cAAA,UAAK6E,EAAOA,QACZ/E,EAAAC,EAAAC,cAAA,UAAK6E,EAAO2B,WAIxB1G,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,aAAd,qBACCgG,EAAepG,IAAI,SAACC,EAAQC,GAAT,OAChBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKF,EAAOF,GAAIK,UAAS,iEAAAuD,OACIgC,EAAMC,KAAKC,MAAM3F,EAAMoG,IAD3B,gEAAA3C,OAEUiC,KAAKC,OAAOG,EAAe3F,OAAOH,EAAM,GAAGoG,GAFrD,+FAI1B7G,EAAAC,EAAAC,cAAA,MAAIS,UAAU,gBAAgBH,EAAOK,UACrCb,EAAAC,EAAAC,cAAA,MAAIS,UAAU,gBAAgBH,EAAOkG,aAQvDI,EAAe,SAAC3H,GAClB,IAAMwH,EAAiBxH,EAAMkB,QAAQmG,KAAK,SAACvG,EAAE6D,GAAH,OAAS2C,SAAS3C,EAAE4C,OAASD,SAASxG,EAAEyG,SAC5ER,EAAQ,CAAC,eAAgB,eAAgB,gBAAiB,cAC7DA,EAAMtF,OAAS+F,EAAe/F,QAC7BsF,EAAMU,OAAOD,EAAe/F,QAEhC,IAAMiG,EAAaF,EAAe/F,OAAOsF,EAAMtF,OACzCmG,EAAYJ,EAAe,GAAGD,MAC9BM,EAAUL,EAAelB,OAAO,SAAAwB,GAAC,OAAIA,EAAEP,QAAQK,IAAWxG,IAAI,SAAA0G,GAAC,OAAIA,EAAE3G,KAC3E,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,4BACCyG,EAAepG,IAAI,SAACC,EAAQC,GAAT,OAChBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKF,EAAOF,GAAIK,UAAS,iEAAAuD,OACIgC,EAAMC,KAAKC,MAAM3F,EAAMoG,IAD3B,gEAAA3C,OAEUiC,KAAKC,OAAOO,EAAe/F,OAAOH,EAAM,GAAGoG,GAFrD,+FAI1B7G,EAAAC,EAAAC,cAAA,UAAKM,EAAOK,UACZb,EAAAC,EAAAC,cAAA,UAAKM,EAAOkG,WAIxB1G,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACXX,EAAAC,EAAAC,cAAA,mCAEH8G,EAAQE,SAAS/H,EAAMuE,SAAW1D,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBAC9CX,EAAAC,EAAAC,cAAA,OACIiB,IAAI,6DACJC,IAAI,SACJT,UAAU,iBCvExBwG,EAAQ,SAAChI,GACX,OACIa,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iCACXX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,eACTxB,EAAM8C,QAAU9C,EAAQ,oCCQpBiI,mLAEb,IAAIC,EACEC,EAAY/H,KAAKJ,MAAMmI,UAmD7B,OAtCID,EAXAC,EAUgB,mBAAZA,EACItH,EAAAC,EAAAC,cAACqH,EAAD,CACA1H,OAAQN,KAAKJ,MAAMU,OACnB6D,OAAQnE,KAAKJ,MAAMuE,SACT,8BAAZ4D,EACEtH,EAAAC,EAAAC,cAACsH,EAAD,MACU,mBAAZF,EACEtH,EAAAC,EAAAC,cAACuH,EAAD,CACA5H,OAAQN,KAAKJ,MAAMU,OACnBgD,SAAUtD,KAAKJ,MAAM0D,SACrBa,OAAQnE,KAAKJ,MAAMuE,SAEX,4BAAZ4D,EACItH,EAAAC,EAAAC,cAACwH,EAAD,MAEQ,uBAAZJ,EACItH,EAAAC,EAAAC,cAACyH,EAAD,CACA9E,SAAUtD,KAAKJ,MAAM0D,SACrBhD,OAAQN,KAAKJ,MAAMU,OACnB6D,OAAQnE,KAAKJ,MAAMuE,OACnB8B,QAASjG,KAAKJ,MAAMqG,UAEZ,0BAAZ8B,EACItH,EAAAC,EAAAC,cAAC0H,EAAD,MAEQ,iBAAZN,EACItH,EAAAC,EAAAC,cAAC2H,EAAD,CACAhF,SAAUtD,KAAKJ,MAAM0D,SACrB2C,QAASjG,KAAKJ,MAAMqG,QACpBnF,QAASd,KAAKJ,MAAMkB,UAEZ,cAAZiH,EACItH,EAAAC,EAAAC,cAAC4H,EAAD,MAEQ,4BAAZR,EACItH,EAAAC,EAAAC,cAAC6H,EAAD,MAEG/H,EAAAC,EAAAC,cAAC8H,EAAD,MA7CPhI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBAAiBsH,KAAK,UACjCjI,EAAAC,EAAAC,cAAA,QAAMgI,MAAM,WAAZ,gBA6CZlI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKX,KAAKJ,MAAMgJ,QAEpBnI,EAAAC,EAAAC,cAAA,WAAMmH,WA3DahG,IAAMC,mBCXnC8G,EAAS,SAACjJ,GACZ,OACIa,EAAAC,EAAAC,cAAA,OAAKS,UAAU,cACXX,EAAAC,EAAAC,cAAA,OACIS,UAAU,oCACVI,MAAO,CAACsH,gBAAgB,YACxBrI,EAAAC,EAAAC,cAACoI,EAAA,EAAD,CAASlI,GAAG,KAAIJ,EAAAC,EAAAC,cAAA,MAAIS,UAAU,cAAd,eAEpBX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,uCACXX,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKf,EAAMU,SAChBG,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKf,EAAM0B,eCTf0H,cACjB,SAAAA,EAAYpJ,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgJ,IACdnJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkJ,GAAA7I,KAAAH,KAAMJ,KACDQ,MAAQ,CACT6I,WAAW,GAHDpJ,wEAOV,IAAAW,EAAAR,KACJ,OAAGA,KAAKI,MAAM6I,UACFxI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUC,GAAG,MAGrBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mCACXX,EAAAC,EAAAC,cAAA,UACIe,QAAS,kBAAMlB,EAAK4C,SAAS,CAAC6F,WAAU,KACxC7H,UAAU,mBAFd,gBAIJX,EAAAC,EAAAC,cAACuI,EAAD,CACI/E,OAAQnE,KAAKJ,MAAMuE,OACnBrD,QAASd,KAAKJ,MAAMkB,kBArBHgB,IAAMC,WCKtBoH,cACjB,SAAAA,EAAYvJ,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmJ,IACdtJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqJ,GAAAhJ,KAAAH,KAAMJ,KA4BVwJ,YAAc,WfPlB,IAAmB9I,IeSDT,EAAKD,MAAMyJ,SAASjJ,MAAME,OfRxCb,EAAOc,KAAK,gBAAiB,CAACD,OAAOA,KerBjCT,EAAKO,MAAQ,CACTkJ,UAAW,KACXjJ,OAAO,EACPiD,SAAU,KACV2C,QAAS,GACTnF,QAAS,GACT8H,MAAO,MARG/I,mFAYC,IfPAS,EAAQiJ,EAAaC,EAASC,EeO9BjJ,EAAAR,KACe,MAA3BA,KAAKJ,MAAMyJ,SAASjJ,QfRRE,EeYXN,KAAKJ,MAAMyJ,SAASjJ,MAAME,OfZPiJ,EeanB,SAAA7B,GAAC,OAAIlH,EAAK4C,SAAS,CAACtC,QAAQ4G,KfbI8B,EechC,SAAAE,GAAC,OAAIlJ,EAAK4C,SAAS,CAACwF,MAAMc,EAAC,efdcD,EeezC,SAAAE,GAAE,OAAInJ,EAAK4C,SAAS,CAChBkG,UAAUK,EAAE,aACZrG,SAASqG,EAAE,SACX1D,QAAQ0D,EAAE,QACV7I,QAAQ6I,EAAE,YflBtBlK,EAASmK,IAAelG,IACjBmG,GAAG,eAAgB,SAAAC,GAAK,OAAIP,EAAYO,KAC/CrK,EAAOoK,GAAG,QAAS,SAAAH,GAAC,OAAIF,EAAQE,KAChCjK,EAAOoK,GAAG,aAAc,SAAAE,GACpBN,EAAYM,KAEhBtK,EAAOc,KAAK,YAAa,CAACD,OAAQA,sCeuB9B,IAyBIwH,EAdJ,GAA8B,MAA3B9H,KAAKJ,MAAMyJ,SAASjJ,OAAeJ,KAAKI,MAAMC,MAAM,CACnD,IAAM2J,EAAQC,OAAOZ,SAASa,SAASC,MAAM,KACvCC,EAAMJ,EAAMA,EAAM3I,OAAO,GAAGgJ,OAClC,OACI5J,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACQC,GAAI,CACAqJ,SAAS,IACT9J,MAAO,CACHE,OAAQ8J,MAqDhC,OA7CItC,EADsB,OAAvB9H,KAAKI,MAAMkJ,UAEN7I,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBAAiBsH,KAAK,UACjCjI,EAAAC,EAAAC,cAAA,QAAMS,UAAU,WAAhB,gBAMc,eAAvBpB,KAAKI,MAAMkJ,UAEN7I,EAAAC,EAAAC,cAAC2J,EAAD,CACIxJ,QAASd,KAAKI,MAAMU,QACpBR,OAAQN,KAAKJ,MAAMyJ,SAASjJ,MAAME,OAClCiB,QAASvB,KAAKJ,MAAMyJ,SAASjJ,MAAMmB,QACnCI,UAAW3B,KAAKoJ,cA3Cb,CACf,iBACA,4BACA,iBACA,0BACA,qBACA,wBACA,eACA,YACA,2BAqCmBzB,SAAS3H,KAAKI,MAAMkJ,WAE/B7I,EAAAC,EAAAC,cAAC4J,EAAD,CACIjH,SAAUtD,KAAKI,MAAMkD,SACrB2C,QAASjG,KAAKI,MAAM6F,QACpBnF,QAASd,KAAKI,MAAMU,QACpB8H,MAAO5I,KAAKI,MAAMwI,MAClBb,UAAW/H,KAAKI,MAAMkJ,UACtBnF,OAAQnE,KAAKJ,MAAMyJ,SAASjJ,MAAM+D,OAClC7D,OAAQN,KAAKJ,MAAMyJ,SAASjJ,MAAME,SAGf,iBAAvBN,KAAKI,MAAMkJ,UAEX7I,EAAAC,EAAAC,cAAC6J,EAAD,CACIrG,OAAQnE,KAAKJ,MAAMyJ,SAASjJ,MAAM+D,OAClCrD,QAASd,KAAKI,MAAMU,UAKxBL,EAAAC,EAAAC,cAAA,4CAMRF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8J,EAAD,CACInK,OAAQN,KAAKJ,MAAMyJ,SAASjJ,MAAME,OAClCgB,SAAUtB,KAAKJ,MAAMyJ,SAASjJ,MAAMkB,WACxCb,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACV0G,YAnHahG,IAAMC,WCNtC2I,EAAiB,uBAEFC,cACjB,SAAAA,EAAY/K,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2K,IACd9K,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6K,GAAAxK,KAAAH,KAAMJ,KAeVgL,OAAS,WACF/K,EAAKO,MAAMyK,gBAAiBhL,EAAKuD,SAAS,CAACyH,gBAAe,IACzDhL,EAAKO,MAAM0K,MACXjL,EAAKuD,SAAS,CAAC2H,eAAc,IAC7BtH,MAAM/D,EAAQsC,GACb+B,KAAK,SAAAC,GAAG,OAAIA,EAAIY,SAChBb,KAAK,SAAAR,GAAI,OAAI1D,EAAKuD,SAAS,CAAC9C,OAAOiD,EAAI,OAAYuH,KAAI,EAAMC,eAAc,MAC3E9G,MAAM,kBAAIpE,EAAKuD,SAAS,CAACyH,gBAAe,EAAME,eAAc,QAvBnDlL,EA2BlBmL,KAAO,WACHnL,EAAKuD,SAAS,CAACyH,gBAAe,IAC3BhL,EAAKO,MAAM0K,KACVjL,EAAKuD,SAAS,CACV9C,OAAQ,GACRwK,KAAK,KAhCCjL,EAqClBkD,aAAe,SAACC,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOnC,IAAMiC,EAAEE,OAAOC,MACd,WAAdH,EAAEE,OAAOnC,KACRkC,EAAM,iBAAsB,GAEf,aAAdD,EAAEE,OAAOnC,KACRkC,EAAM,mBAAwB,GAElCpD,EAAKuD,SAASH,IA9CApD,EAiDlB8B,UAAY,WAER,GAA+B,KAA3B9B,EAAKO,MAAME,OAAO+J,QAA8C,KAA7BxK,EAAKO,MAAMkB,SAAS+I,OAA3D,CAQIxK,EAAKuD,SAAS,CAAC6H,aAAY,IAC3B,IAAMC,EAAMxL,GAAWG,EAAKO,MAAM0K,IAAM7I,EAAgBC,GACxDuB,MAAMyH,EAAK,CACPvH,OAAS,OACTC,KAAQC,KAAKC,UAAU,CAACxD,OAAOT,EAAKO,MAAME,OAAO6K,cAAcd,OAAQ/I,SAASzB,EAAKO,MAAMkB,SAAS+I,WAEvGtG,KAAK,SAAAC,GAAG,OAAIA,EAAIY,SAChBb,KAAK,SAAAR,GACC,UAAWA,EACV1D,EAAKuD,SAAS,CAACgI,iBAAgB,EAAMC,cAAc9H,EAAI,MAAW0H,aAAY,IAE9EpL,EAAKuD,SAAS,CAACe,OAAOZ,EAAI,OAAY+H,oBAAmB,MAGhErH,MAAM,kBAAMpE,EAAKuD,SAAS,CAACkI,oBAAmB,WArB/CzL,EAAKuD,SAAS,CACVgI,gBAA6C,KAA3BvL,EAAKO,MAAME,OAAO+J,OACpCkB,kBAAiD,KAA7B1L,EAAKO,MAAMkB,SAAS+I,OACxCgB,cAAeX,KArDvB7K,EAAKO,MAAQ,CACT0K,KAAK,EACLxK,OAAQT,EAAKD,MAAMU,QAAU,GAC7BgB,SAAU,GACVgK,mBAAoB,KACpBF,iBAAiB,EACjBC,cAAeX,EACfa,mBAAmB,EACnBN,aAAa,EACbJ,gBAAgB,EAChBE,eAAe,GAZLlL,wEA8Ed,OAAmC,OAAhCG,KAAKI,MAAMkL,mBACPtL,KAAKI,MAAMkL,mBAEN7K,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAI,CACAqJ,SAAQ,SAAAvF,OAAU3E,KAAKI,MAAME,OAAO6K,cAAcd,QAClDjK,MAAO,CACHkB,SAAUtB,KAAKI,MAAMkB,SACrBC,QAAQvB,KAAKI,MAAM0K,IACnB3G,OAAOnE,KAAKI,MAAM+D,OAClB7D,OAAON,KAAKI,MAAME,WAIpBG,EAAAC,EAAAC,cAAC8H,EAAD,MAIlBhI,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCACCX,KAAKI,MAAMyK,gBACZpK,EAAAC,EAAAC,cAAA,KAAGS,UAAU,eAAb,gCACAX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,uCACfX,EAAAC,EAAAC,cAAC6K,EAAD,CACQ9J,QAAS1B,KAAK4K,OACdxJ,UAAU,0BACTpB,KAAKI,MAAM2K,cACRtK,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBAAiBsH,KAAK,UACjCjI,EAAAC,EAAAC,cAAA,QAAMS,UAAU,WAAhB,eAEL,YAEPX,EAAAC,EAAAC,cAAC6K,EAAD,CACI9J,QAAS1B,KAAKgL,KACd5J,UAAU,0BAFd,SAMJX,EAAAC,EAAAC,cAAC8K,EAAD,CACIC,MAAM,UACN3K,GAAG,SACHgE,UAAU,IACV4G,SAAU3L,KAAKI,MAAM0K,IACrB3H,MAAOnD,KAAKI,MAAME,OAClB0E,SAAUhF,KAAK+C,aACf6I,QAAS5L,KAAKI,MAAMgL,gBACpBS,eAAgB7L,KAAKI,MAAMiL,gBAC/B5K,EAAAC,EAAAC,cAAC8K,EAAD,CACIC,MAAM,WACN3K,GAAG,WACHgE,UAAU,KACV4G,UAAU,EACVxI,MAAOnD,KAAKI,MAAMkB,SAClB0D,SAAUhF,KAAK+C,aACf6I,QAAS5L,KAAKI,MAAMmL,kBACpBM,eAAe,4BACnBpL,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAC6K,EAAD,CACI9J,QAAS1B,KAAK2B,UACdP,UAAU,0BACTpB,KAAKI,MAAM6K,YACRxK,EAAAC,EAAAC,cAAA,OAAKS,UAAU,iBAAiBsH,KAAK,UACjCjI,EAAAC,EAAAC,cAAA,QAAMS,UAAU,WAAhB,eAEJ,kBA/IOU,IAAMC,WAuJnC+J,EAAS,SAAClM,GACZ,OACIa,EAAAC,EAAAC,cAAA,UACIe,QAAS9B,EAAM8B,QACfN,UAAWxB,EAAMwB,WAChBxB,EAAMmM,WAKbC,EAAY,SAACpM,GACf,OACIa,EAAAC,EAAAC,cAAA,OAAKS,UAAU,QACXX,EAAAC,EAAAC,cAAA,UAAKf,EAAM8L,OACXjL,EAAAC,EAAAC,cAAA,SACII,GAAInB,EAAMmB,GACVgE,UAAWnF,EAAMmF,UACjB4G,SAAU/L,EAAM+L,SAChBxI,MAAOvD,EAAMuD,MACb6B,SAAUpF,EAAMoF,SAChBiH,aAAa,MACb7K,UAAS,gBAAAuD,OAAkB/E,EAAMgM,SAAW,cAC5CpK,MAAO,CAAC0D,WAAW,UACtBtF,EAAMgM,SACHnL,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBAAoBxB,EAAMiM,kBCpK1CK,mLAXX,IAAM5L,EAAoC,MAA3BN,KAAKJ,MAAMyJ,SAASjJ,MAAc,KAAOJ,KAAKJ,MAAMyJ,SAASjJ,MAAME,OAClF,OACEG,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACbX,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CAACC,UAAU,SACvBhB,EAAAC,EAAAC,cAACwL,EAAD,CACE7L,OAAQA,YAPAyB,aCEGqK,mLAEb,OACI3L,EAAAC,EAAAC,cAACoI,EAAA,EAAD,KACItI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOyL,KAAK,IAAIC,OAAK,EAACC,UAAWL,IACjCzL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOyL,KAAK,gBAAgBE,UAAWpD,IACvC1I,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOyL,KAAK,SAASE,UAAW3E,YANf9F,IAAMC,WCMnByK,QACW,cAA7BvC,OAAOZ,SAASoD,UAEe,UAA7BxC,OAAOZ,SAASoD,UAEhBxC,OAAOZ,SAASoD,SAASC,MACvB,2DCXNC,IAASC,OAAOnM,EAAAC,EAAAC,cAACkM,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnJ,KAAK,SAAAoJ,GACjCA,EAAaC","file":"static/js/main.5834f241.chunk.js","sourcesContent":["import socketIOClient from 'socket.io-client';\r\nimport { baseUrl as endpoint } from '../Connect';\r\n// const endpoint = 'http://10.0.1.16:8080';\r\nlet socket;\r\n\r\n\r\nfunction subscribeToJoinGame(gameId, cb){\r\n    //\r\n}\r\n\r\n\r\nfunction getPlayers(gameId){\r\n    socket.emit('get-players', {gameId: gameId});\r\n}\r\n\r\n\r\nfunction initGameState(gameId, lsPlayersCB, timerCB, gameStateCB){ \r\n    socket = socketIOClient(endpoint);\r\n    socket.on('list-players', pData => lsPlayersCB(pData));\r\n    socket.on('timer', t => timerCB(t));\r\n    socket.on('game-state', gsVal => {\r\n        gameStateCB(gsVal);\r\n    });\r\n    socket.emit('join-game', {gameId: gameId});\r\n    //socket.emit('init-game-state', {gameId:gameId});\r\n}\r\n\r\n\r\nfunction updateGameState(gameId, newGameState){\r\n    socket.emit('update-game-state', {gameId:gameId, newGameState:newGameState});\r\n}\r\n\r\n\r\nfunction startGame(gameId){\r\n    socket.emit('start-playing', {gameId:gameId});\r\n}\r\n\r\n\r\nexport { subscribeToJoinGame, initGameState, updateGameState, startGame, getPlayers };","const prod = true;\r\nconst baseUrl = prod ? 'https://gameboard-238222.appspot.com/' : 'http://10.0.1.16:8080';\r\n\r\nexport { baseUrl };","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {  getPlayers } from './socketConnect';\r\n\r\nexport default class Lobby extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        getPlayers(this.props.gameId);\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){ return(<Redirect to='/error' />); }\r\n\r\n        // const anims = ['heartBeat', 'jello', 'wobble', 'tada', 'swing', 'shake', 'bounce', 'flash', 'pulse', 'rubberBand'];\r\n        const players = this.props.players || [];\r\n        return(\r\n            <div id='lobby-container'>\r\n                <h3>Welcome to the Lobby</h3>\r\n                <h5>Currently in the lobby:</h5>\r\n                {players.map((player, index) => \r\n                <div key={player.id}>\r\n                    <h2 \r\n                        className={(index===players.length-1) && 'animated bounceInUp'}>\r\n                        {player.username}</h2>\r\n                </div>)}\r\n                {this.props.starter &&\r\n                <div style={{marginTop:'2em'}}>\r\n                    <h6 className='d-flex justify-content-center'>\r\n                        With great power comes great responsibility\r\n                    </h6>\r\n                    <div className='d-flex justify-content-center'>\r\n                        <button \r\n                            onClick={() => this.props.startGame('inputQuestions')}\r\n                            className='btn btn-warning py-2'>\r\n                            Click this once everyone is in the lobby!\r\n                        </button>\r\n                    </div>\r\n                </div>}\r\n                <div className='text-center py-2'>\r\n                    <img \r\n                        src='https://media.giphy.com/media/26DNhSJnqWFdgPgMo/giphy.gif'\r\n                        alt='doggo'\r\n                        className='img-fluid' />\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const prod = true;\r\nconst baseUrl = prod ? 'https://gameboard-238222.appspot.com' : 'http://10.0.1.16:8080';\r\nconst getGameIdUrl = '/api/get/gameId';\r\nconst createGameUrl = '/api/create/newGame';\r\nconst createPlayerUrl = '/api/create/player';\r\n\r\nexport { baseUrl, getGameIdUrl, createGameUrl, createPlayerUrl };","// const endpoint = 'http://127.0.0.1:8080';\r\nimport { baseUrl as endpoint } from './EndPoints'\r\n// const endpoint = 'http://10.0.1.16:8080';\r\nconst insertQuestion = '/api/create/question';\r\nconst insertAnswer = '/api/create/answer';\r\nconst updateScoresUrl = '/api/update/scores';\r\nconst getGameIdUrl = '/api/get/gameId';\r\n\r\n\r\nfunction commonGet(url, cb, err){\r\n    fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => cb(data))\r\n        .catch(() => err());\r\n}\r\n\r\n\r\nfunction getGameId(cb){\r\n    commonGet(endpoint+getGameIdUrl, cb);\r\n}\r\n\r\n\r\nfunction updateScores(data, cb){\r\n    fetch(endpoint+updateScoresUrl, {\r\n            'method':'POST',\r\n            'body': JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                if(res.status===200){\r\n                    cb(true);\r\n                } else { cb(false); }\r\n            })\r\n            .catch(() => cb(false));\r\n}\r\n\r\nfunction createQuestion(data, cb){\r\n    fetch(endpoint+insertQuestion, {\r\n            'method':'POST',\r\n            'body': JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                if(res.status===200){\r\n                    cb(true);\r\n                } else { cb(false); }\r\n            })\r\n            .catch(() => cb(false));\r\n}\r\n\r\nfunction createAnswer(data, cb){\r\n    fetch(endpoint+insertAnswer, {\r\n        'method':'POST',\r\n        'body': JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            if(res.status===200){\r\n                cb(true);\r\n            } else { cb(false); }\r\n        })\r\n        .catch(() => cb(false));\r\n}\r\n\r\n\r\nexport { createQuestion, createAnswer, updateScores, getGameId };","import React from 'react';\r\n\r\nconst Response = (props) => {\r\n    const headerClass = props.status ? 'text-success' : 'text-danger';\r\n    const style = 'text-center py-2';\r\n    return(\r\n        <div>\r\n            <div className={style}>\r\n                <h2 className={headerClass}>{props.header}</h2>\r\n            </div>\r\n            {!props.status && <div className={style}>\r\n                <h5>{props.message}</h5>\r\n            </div>}\r\n            <div className={style}>\r\n                <h5 className='animated infinite pulse'>\r\n                    Just waiting on the others :)\r\n                </h5>\r\n            </div>\r\n            {props.image && <div>\r\n                <div className={style}>\r\n                    <img \r\n                        src={props.image}\r\n                        alt='gif4u'\r\n                        className='img-fluid' />\r\n                </div>\r\n                <p className='text-muted'>\r\n                    <small>via {props.author} on {props.source}</small>\r\n                </p>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Response }","import React from 'react';\r\nimport { createQuestion } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\nimport { Response } from '../Responses/Response';\r\n\r\nexport default class InputQuestion extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            valid: true,\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        change['valid'] = true;\r\n        this.setState(change);\r\n    }\r\n\r\n    insertQuestionIntoDb = () => {\r\n        if(!this.state.question){\r\n            this.setState({valid:false});\r\n            return;\r\n        }\r\n        const data = {\r\n            gameId:this.props.gameId,\r\n            question:this.state.question,\r\n            userId:this.props.userId\r\n        };\r\n        createQuestion(data, res => this.setState({success:res}));\r\n    }\r\n\r\n    addBlank = () => {\r\n        const b = '______';\r\n        if(this.state.question.length===0){\r\n            this.setState({question:b});\r\n        }else{\r\n            const blank = (this.state.question.slice(-1) === ' ') ? b : (' ' + b);\r\n            const newText = this.state.question+blank;\r\n            this.setState({question: newText});\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        if(this.state.success===null){  \r\n            return(\r\n                <div>\r\n                    <div className='d-flex justify-content-center'>\r\n                        <h4>Add a question for everyone to answer</h4>\r\n                    </div>\r\n                    <div>\r\n                        <textarea \r\n                            id='question'\r\n                            type='text'\r\n                            rows='3'\r\n                            maxLength='255'\r\n                            value={this.state.question}\r\n                            onChange={this.handleChange}\r\n                            placeholder='Enter your question'\r\n                            className={this.state.valid ? 'form-control' : 'form-control is-invalid'}\r\n                            style={{fontWeight:'bold'}} />\r\n                        {!this.state.valid && <div className='invalid-feedback'>\r\n                            Gotta add a little bit of text\r\n                        </div>}\r\n                    </div>\r\n                    <div className='d-flex justify-content-between py-2'>\r\n                        <button className='btn btn-info w-50 py-2' onClick={this.insertQuestionIntoDb}>\r\n                            Add question\r\n                        </button>\r\n                        <button className='btn btn-secondary py-2' onClick={this.addBlank}>\r\n                            Add blank\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? '' : 'There was an issue adding your question.';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/l0MYBzykeuHzLef3G/giphy.gif'\r\n                    author='Karo Rigaud'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { createAnswer } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\nimport { Response } from '../Responses/Response';\r\n\r\n\r\nexport default class AnswerQuestion extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            answer: '',\r\n            valid: true,\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        change['valid'] = true;\r\n        this.setState(change);\r\n    }\r\n\r\n    insertAnsIntoDb = () => {\r\n        if(!this.state.answer){\r\n            this.setState({valid:false});\r\n            return;\r\n        }\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            answer: this.state.answer,\r\n            userId: this.props.userId\r\n        };\r\n        createAnswer(data, response => this.setState({success:response}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        const style='d-flex justify-content-center py-2';\r\n        if(this.state.success===null){\r\n            return(\r\n                <div>\r\n                    <div className='pt-1'>\r\n                        <h4>{this.props.question}</h4>\r\n                    </div>\r\n                    <div className={style}>\r\n                        <textarea \r\n                            id='answer'\r\n                            type='text'\r\n                            rows='3'\r\n                            maxLength='255'\r\n                            value={this.state.answer}\r\n                            onChange={this.handleChange}\r\n                            placeholder='Enter your answer'\r\n                            className={this.state.valid ? 'form-control' : 'form-control is-invalid'}\r\n                            style={{fontWeight:'bold'}} />\r\n                        {!this.state.valid && <div className='invalid-feedback'>\r\n                            Gotta add a little bit of text\r\n                        </div>}\r\n                    </div>\r\n                    <div className='py-2'>\r\n                        <button className='btn btn-info w-50 py-2' onClick={this.insertAnsIntoDb}>\r\n                            Add your answer!\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? '' : 'There was an issue adding your question :(';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/3ohzgD1wRxpvpkDCSI/giphy.gif'\r\n                    author='Chris Gannon'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport { Response } from '../Responses/Response';\r\nimport { updateScores } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\n\r\n\r\nexport default class PickFavorite extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleFaveClick = (owner) => {\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: owner\r\n        };\r\n        updateScores(data,  res => this.setState({success:res}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        const answersWithoutUser = this.props.answers.filter(answer => answer.owner!==this.props.userId);\r\n\r\n        if(this.state.success===null){\r\n            return(\r\n                <div>\r\n                    <h4 className='my-2'>\r\n                        {this.props.question}\r\n                    </h4>\r\n                    <div className='py-2 w-100'>\r\n                        {answersWithoutUser.map(ans =>\r\n                            <button \r\n                                key={ans.owner}\r\n                                className='btn btn-outline-success btn-lg my-2 w-100'\r\n                                onClick={() => this.handleFaveClick(ans.owner)}>\r\n                                    {ans.answer}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? 'May the votes be ever in your favor' : 'There was an issue adding your answer.';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/l0HlyONUJlDBrv6iQ/giphy.gif'\r\n                    author='joelplosz'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// Another good analyzing results animation https://media.giphy.com/media/l0HlyONUJlDBrv6iQ/giphy.gif","import React from 'react';\r\n\r\n\r\nconst AfterInputQuestionIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Nice questions!'\r\n            body=\"Let the games begin.\" />\r\n    );\r\n}\r\n\r\nconst AfterAnswersIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header=\"Think you're funny?\"\r\n            body=\"We will see...\" />\r\n    );\r\n}\r\n\r\nconst AfterPickFaveIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header=\"Let's see what everyone thought\" />\r\n    );\r\n}\r\n\r\nconst NextRoundIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Get ready for the next round'\r\n            image='https://media.giphy.com/media/xULW8OB67sl1MTjH32/giphy.gif' />\r\n    );\r\n}\r\n\r\nconst BeforeFinalResults = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Calculating the final results'\r\n            image='https://media.giphy.com/media/Y6Hj3kY0d8OYw/giphy.gif'/>\r\n    );\r\n}\r\n\r\nconst IntermissionTemplate = (props) => {\r\n    // off centered because of existing text/divs\r\n    const style = 'text-center py-2';\r\n    const anims = [\r\n        'bounceOut',\r\n        'bounceOutDown',\r\n        'bounceOutLeft',\r\n        'bounceOutUp',\r\n        'fadeOutUpBig',\r\n        'flipOutX',\r\n        'rotateOutUpLeft',\r\n        'rotateOutUpRight',\r\n        'slideOutUp',\r\n        'slideOutDown',\r\n        'slideOutLeft',\r\n        'slideOutRight',\r\n        'zoomOut',\r\n        'zoomOutUp',\r\n        'zoomOutDown',\r\n        'zoomOutLeft',\r\n        'zoomOutRight',\r\n        'hinge'\r\n    ];\r\n    \r\n    return(\r\n        <div>\r\n            {props.header &&\r\n                <div className={style}>\r\n                    <h2 className={`animated ${anims[Math.floor(Math.random()*anims.length)]} delay-2s text-info`}>{props.header}</h2>\r\n                </div>}\r\n            {props.body &&\r\n                <div className={style}>\r\n                    <h5>{props.body}</h5>\r\n                </div>}\r\n            {props.image &&\r\n                <div className={style}>\r\n                    <img \r\n                        src={props.image}\r\n                        alt='gif4u'\r\n                        className='img-fluid' />\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { \r\n    AfterInputQuestionIntermission, \r\n    AfterAnswersIntermission, \r\n    AfterPickFaveIntermission,\r\n    NextRoundIntermission,\r\n    BeforeFinalResults\r\n}","// stateless functional components\r\nimport React from 'react';\r\n\r\nconst RoundResults = (props) => {\r\n    const answersOrdered = props.answers.sort((a, b) => parseInt(b.score) - parseInt(a.score));\r\n    const playersOrdered = props.players.sort((a,b) => parseInt(b.score) - parseInt(a.score));\r\n    const anims = ['bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp'];\r\n    if(anims.length > answersOrdered.length){\r\n        anims.splice(answersOrdered.length);\r\n    }\r\n    const bucketSize = answersOrdered.length/anims.length;\r\n\r\n    return(\r\n        <div>\r\n            <h4 className='my-2'>{props.question}</h4>\r\n            <div className='my-2 py-2'>\r\n                <h6 className='text-muted'>Favorite Answers</h6>\r\n                {answersOrdered.map((answer, index) => \r\n                    <div key={answer.owner} className={`animated\r\n                                                        ${anims[Math.floor(index/bucketSize)]}\r\n                                                        delay-${Math.floor((answersOrdered.length-index-1)/bucketSize)}s\r\n                                                        d-flex justify-content-between my-2`}>\r\n                        <h3>{answer.answer}</h3>\r\n                        <h3>{answer.score}</h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='mt-4 py-2'>\r\n                <h6 className='text-info'>Current Standings</h6>\r\n                {playersOrdered.map((player, index) => \r\n                    <div key={player.id} className={`animated\r\n                                                    ${anims[Math.floor(index/bucketSize)]}\r\n                                                    delay-${Math.floor((answersOrdered.length-index-1)/bucketSize)}s\r\n                                                    d-flex justify-content-between my-2`}>\r\n                        <h5 className='text-success'>{player.username}</h5>\r\n                        <h5 className='text-success'>{player.score}</h5>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst FinalResults = (props) => {\r\n    const playersOrdered = props.players.sort((a,b) => parseInt(b.score) - parseInt(a.score));\r\n    const anims = ['bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp'];\r\n    if(anims.length > playersOrdered.length){\r\n        anims.splice(playersOrdered.length);\r\n    }\r\n    const bucketSize = playersOrdered.length/anims.length;\r\n    const highScore = playersOrdered[0].score;\r\n    const winners = playersOrdered.filter(p => p.score===highScore).map(p => p.id);\r\n    return(\r\n        <div>\r\n            <div className='py-2'>\r\n                <h4>Final Results!</h4>\r\n                {playersOrdered.map((player, index) => \r\n                    <div key={player.id} className={`animated\r\n                                                    ${anims[Math.floor(index/bucketSize)]}\r\n                                                    delay-${Math.floor((playersOrdered.length-index-1)/bucketSize)}s\r\n                                                    d-flex justify-content-between my-2`}>\r\n                        <h3>{player.username}</h3>\r\n                        <h3>{player.score}</h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='text-center py-2'>\r\n                <h4>Thanks for playing!!</h4>\r\n            </div>\r\n            {winners.includes(props.userId) && <div className='text-center py-2'>\r\n                <img \r\n                    src='https://media.giphy.com/media/fdPrizLgIwnc8dHhJR/giphy.gif'\r\n                    alt='winner'\r\n                    className='img-fluid' />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { RoundResults, FinalResults }","import React from 'react';\r\n\r\nconst Error = (props) => {\r\n    return(\r\n        <div className='d-flex justify-content-center'>\r\n            <h3 className='text-danger'>\r\n                {props.message ? props : 'Whoops... Something went wrong'}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Error };","import React from 'react';\r\nimport InputQuestion from './InputQuestion';\r\nimport AnswerQuestion from './AnswerQuestion';\r\nimport PickFavorite from './PickFavorite';\r\nimport { \r\n    AfterInputQuestionIntermission, \r\n    AfterAnswersIntermission,\r\n    AfterPickFaveIntermission,\r\n    NextRoundIntermission,\r\n    BeforeFinalResults \r\n} from '../Playarea/Intermission';\r\nimport { RoundResults } from '../Playarea/Views';\r\nimport { Error } from '../Error';\r\n\r\nexport default class Arena extends React.Component{\r\n    render(){\r\n        let view;\r\n        const playState = this.props.playState;\r\n\r\n        if(!playState){\r\n            view = (\r\n                <div>\r\n                    <p>Loading...</p>\r\n                    <div className='spinner-border' role='status'>\r\n                        <span class='sr-only'>Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(playState==='inputQuestions'){\r\n            view = (<InputQuestion \r\n                    gameId={this.props.gameId}\r\n                    userId={this.props.userId} />);\r\n        } else if(playState==='afterQuestionIntermission'){\r\n            view = (<AfterInputQuestionIntermission />);\r\n        } else if(playState==='answerQuestion'){\r\n            view = (<AnswerQuestion\r\n                    gameId={this.props.gameId}\r\n                    question={this.props.question}\r\n                    userId={this.props.userId} />);\r\n        } \r\n        else if(playState==='afterAnswerIntermission'){\r\n            view = (<AfterAnswersIntermission />);\r\n        }\r\n        else if(playState==='pickFavoriteAnswer'){\r\n            view = (<PickFavorite\r\n                    question={this.props.question}\r\n                    gameId={this.props.gameId}\r\n                    userId={this.props.userId}\r\n                    answers={this.props.answers} />);\r\n        }\r\n        else if(playState==='afterPickIntermission'){\r\n            view = (<AfterPickFaveIntermission />);\r\n        } \r\n        else if(playState==='roundResults'){\r\n            view = (<RoundResults \r\n                    question={this.props.question}\r\n                    answers={this.props.answers}\r\n                    players={this.props.players} />);\r\n        } \r\n        else if(playState==='nextRound'){\r\n            view = (<NextRoundIntermission />);\r\n        }\r\n        else if(playState==='beforeFinalIntermission'){\r\n            view = (<BeforeFinalResults />);\r\n        } \r\n        else { view = (<Error />); }\r\n\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <h3>{this.props.timer}</h3>\r\n                </div>\r\n                <div>{view}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <div className='text-muted'>\r\n            <div \r\n                className='d-flex justify-content-center p-1'\r\n                style={{backgroundColor:'#000000'}}>\r\n                <NavLink to='/'><h5 className='text-muted'>Gameboard</h5></NavLink>\r\n            </div>\r\n            <div className='container'>\r\n                <div className='d-flex justify-content-between px-2'>\r\n                    <div><h5>{props.gameId}</h5></div>\r\n                    <div><h5>{props.username}</h5></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Header }","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FinalResults } from './Components/Playarea/Views';\r\n\r\n\r\nexport default class EndGame extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            playAgain: false\r\n        };\r\n    }\r\n\r\n    render(){\r\n        if(this.state.playAgain){\r\n            return( <Redirect to='/'/> );\r\n        }\r\n        return(\r\n            <div>\r\n                <div className='d-flex justify-content-end my-2'>\r\n                    <button\r\n                        onClick={() => this.setState({playAgain:true})}\r\n                        className='btn btn-warning'>Play again?</button>\r\n                </div>\r\n                <FinalResults \r\n                    userId={this.props.userId}\r\n                    players={this.props.players} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {  Redirect } from 'react-router-dom';\r\nimport Lobby from './Playarea/Lobby';\r\nimport Arena from './Playarea/Arena';\r\nimport { Header } from '../Components/Playarea/Header';\r\nimport { initGameState, startGame } from './Playarea/socketConnect';\r\nimport EndGame from '../EndGame';\r\n\r\n// const playStates = ['inputQuestions', 'answerQuestion', 'pickFavoriteAnswer'];\r\n\r\nexport default class Playarea extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            gameState: null,\r\n            error: false,\r\n            question: null,\r\n            answers: [],\r\n            players: [],\r\n            timer: null\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.location.state==null){\r\n            return;\r\n        }\r\n        initGameState(\r\n            this.props.location.state.gameId, \r\n            p => this.setState({players:p}),\r\n            t => this.setState({timer:t['currentTime']}),\r\n            gs => this.setState({\r\n                gameState:gs['currentState'], \r\n                question:gs['question'], \r\n                answers:gs['answers'],\r\n                players:gs['players']\r\n            })\r\n        );\r\n    }\r\n\r\n    handleStart = () => {\r\n        //updateGameState(this.props.location.state.gameId, 'play');\r\n        startGame(this.props.location.state.gameId);\r\n    }\r\n\r\n    render(){\r\n        const playStates = [\r\n            'inputQuestions',\r\n            'afterQuestionIntermission',\r\n            'answerQuestion',\r\n            'afterAnswerIntermission',\r\n            'pickFavoriteAnswer',\r\n            'afterPickIntermission',\r\n            'roundResults',\r\n            'nextRound',\r\n            'beforeFinalIntermission'\r\n        ];\r\n        if(this.props.location.state==null || this.state.error){ \r\n            const paths = window.location.pathname.split('/');\r\n            const gId = paths[paths.length-1].trim();\r\n            return(\r\n                <Redirect \r\n                        to={{\r\n                            pathname:'/',\r\n                            state: { \r\n                                gameId: gId\r\n                            }\r\n                        }}/>\r\n            ); \r\n        } //if they didn't come from the login screen\r\n\r\n        let view;\r\n        if(this.state.gameState===null){\r\n            view = (\r\n                <div>\r\n                    <p>Getting everything ready</p>\r\n                    <div className='spinner-border' role='status'>\r\n                        <span className='sr-only'>Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } \r\n        else {\r\n            if(this.state.gameState==='startLobby'){\r\n                view =  (\r\n                    <Lobby \r\n                        players={this.state.players}\r\n                        gameId={this.props.location.state.gameId}\r\n                        starter={this.props.location.state.starter}\r\n                        startGame={this.handleStart} />\r\n                );\r\n            } \r\n            else if(playStates.includes(this.state.gameState)){ //this.state.gameState==='inputQuestions'\r\n                view =  (\r\n                    <Arena \r\n                        question={this.state.question}\r\n                        answers={this.state.answers}\r\n                        players={this.state.players}\r\n                        timer={this.state.timer}\r\n                        playState={this.state.gameState}\r\n                        userId={this.props.location.state.userId}\r\n                        gameId={this.props.location.state.gameId} />\r\n                );\r\n            }\r\n            else if(this.state.gameState==='finalResults'){\r\n                view = (\r\n                    <EndGame \r\n                        userId={this.props.location.state.userId}\r\n                        players={this.state.players} />\r\n                );\r\n            }\r\n            else {\r\n                view = (\r\n                    <div>Hm... Something went wrong...</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <Header \r\n                    gameId={this.props.location.state.gameId}\r\n                    username={this.props.location.state.username} />\r\n                <div className='container'>\r\n                    <div className='p-2'>\r\n                        {view}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { baseUrl, getGameIdUrl, createGameUrl, createPlayerUrl } from '../ApiHandler/EndPoints';\r\nimport { Error } from '../Components/Error';\r\nconst blankGameIdMsg = 'Gotta have a Game ID';\r\n\r\nexport default class Start extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            new: false,\r\n            gameId: this.props.gameId || '',\r\n            username: '',\r\n            redirectToPlayarea: null,\r\n            gameIdIsInvalid: false,\r\n            gIdInvalidMsg: blankGameIdMsg,\r\n            usernameIsInvalid: false,\r\n            loadingPlay: false,\r\n            getGameIdError: false,\r\n            loadingGameID: false\r\n        };\r\n    }\r\n\r\n    getGid = () => {\r\n        if(this.state.getGameIdError){ this.setState({getGameIdError:false}); }\r\n        if(!this.state.new){\r\n            this.setState({loadingGameID:true});\r\n            fetch(baseUrl+getGameIdUrl)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({gameId:data['gameId'], new:true, loadingGameID:false}))\r\n            .catch(()=>this.setState({getGameIdError:true, loadingGameID:false}));\r\n        }\r\n    }\r\n\r\n    join = () => {\r\n        this.setState({getGameIdError:false});\r\n        if(this.state.new){\r\n            this.setState({\r\n                gameId: '',\r\n                new: false\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        if(e.target.id==='gameId'){\r\n            change['gameIdIsInvalid'] = false;\r\n        }\r\n        if(e.target.id==='username'){\r\n            change['usernameIsInvalid'] = false;\r\n        }   \r\n        this.setState(change);\r\n    }\r\n\r\n    startGame = () => {\r\n\r\n        if((this.state.gameId.trim()==='') || (this.state.username.trim()==='')){\r\n            this.setState({\r\n                gameIdIsInvalid: (this.state.gameId.trim()===''),\r\n                usernameIsInvalid: (this.state.username.trim()===''),\r\n                gIdInvalidMsg: blankGameIdMsg\r\n            });\r\n            return;\r\n        } else{\r\n            this.setState({loadingPlay:true});\r\n            const url = baseUrl + (this.state.new ? createGameUrl : createPlayerUrl);\r\n            fetch(url, {\r\n                'method':'POST',\r\n                'body': JSON.stringify({gameId:this.state.gameId.toLowerCase().trim(), username:this.state.username.trim()})\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if('error' in data){\r\n                    this.setState({gameIdIsInvalid:true, gIdInvalidMsg:data['error'], loadingPlay:false});\r\n                } else{\r\n                    this.setState({userId:data['userId'], redirectToPlayarea:true});\r\n                }\r\n            })\r\n            .catch(() => this.setState({redirectToPlayarea:false}));\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.redirectToPlayarea!==null){\r\n            if(this.state.redirectToPlayarea){\r\n                return (\r\n                    <Redirect \r\n                        to={{\r\n                            pathname:`/play/${this.state.gameId.toLowerCase().trim()}`,\r\n                            state: { \r\n                                username: this.state.username, \r\n                                starter:this.state.new, \r\n                                userId:this.state.userId,\r\n                                gameId:this.state.gameId\r\n                            }\r\n                        }}/>\r\n                );\r\n            } else { return ( <Error /> ); }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <h1>Welcome to gameboard!</h1>\r\n                {this.state.getGameIdError &&\r\n                <p className='text-danger'>Could not get a new Game ID.</p>}\r\n                <div className='d-flex justify-content-between my-3'>\r\n                <Button\r\n                        onClick={this.getGid}\r\n                        className='btn btn-lg btn-primary'>\r\n                        {this.state.loadingGameID ? (\r\n                            <div className='spinner-border' role='status'>\r\n                                <span className='sr-only'>Loading...</span>\r\n                            </div>\r\n                        ): 'New Game'}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.join}\r\n                        className='btn btn-lg btn-primary'>\r\n                        Join\r\n                    </Button>\r\n                </div>\r\n                <InputArea \r\n                    title='Game ID'\r\n                    id='gameId'\r\n                    maxLength='5'\r\n                    disabled={this.state.new}\r\n                    value={this.state.gameId}\r\n                    onChange={this.handleChange}\r\n                    invalid={this.state.gameIdIsInvalid}\r\n                    invalidMessage={this.state.gIdInvalidMsg} />\r\n                <InputArea \r\n                    title='Username'\r\n                    id='username'\r\n                    maxLength='31'\r\n                    disabled={false}\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                    invalid={this.state.usernameIsInvalid}\r\n                    invalidMessage='Please enter a username'/>\r\n                <div className='my-3'>\r\n                    <Button\r\n                        onClick={this.startGame}\r\n                        className='btn btn-warning btn-lg'>\r\n                        {this.state.loadingPlay ? (\r\n                            <div className='spinner-border' role='status'>\r\n                                <span className='sr-only'>Loading...</span>\r\n                            </div>\r\n                        ) : 'Play!'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Button = (props) => {\r\n    return(\r\n        <button\r\n            onClick={props.onClick}\r\n            className={props.className}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nconst InputArea = (props) => {\r\n    return(\r\n        <div className='my-2'>\r\n            <h5>{props.title}</h5>\r\n            <input\r\n                id={props.id}\r\n                maxLength={props.maxLength}\r\n                disabled={props.disabled}\r\n                value={props.value} \r\n                onChange={props.onChange}\r\n                autoComplete='off'\r\n                className={`form-control ${props.invalid && 'is-invalid'}`}\r\n                style={{fontWeight:'bold'}} />\r\n            {props.invalid && \r\n                <div className='invalid-feedback'>{props.invalidMessage}</div>}\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Start from './Components/Start';\r\n\r\n\r\nclass App extends Component {\r\n  render(){\r\n    const gameId = this.props.location.state==null ? null : this.props.location.state.gameId;\r\n    return(\r\n      <div className='container'>\r\n        <div style={{marginTop:'2em'}}>{/*spacer*/}</div>\r\n        <Start \r\n          gameId={gameId} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport Playarea from './Playarea';\r\nimport App from '../App';\r\nimport { Error } from './Error'; //Error seems to be some react keyword\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\n\r\nexport default class Nav extends React.Component{\r\n    render(){\r\n        return(\r\n            <Router>\r\n                <Route path='/' exact component={App} />                \r\n                <Route path='/play/:gameId' component={Playarea} />\r\n                <Route path='/error' component={Error} />\r\n            </Router>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Nav from './Components/Nav';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\nReactDOM.render(<Nav />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}