{"version":3,"sources":["Components/Playarea/socketConnect.js","Components/Error.js","ApiHandler/EndPoints.js","Components/Start.js","App.js","Components/Connect.js","Components/Playarea/Lobby.js","ApiHandler/FetchHandler.js","Components/Responses/Response.js","Components/Playarea/InputQuestion.js","Components/Playarea/AnswerQuestion.js","Components/Playarea/PickFavorite.js","Components/Playarea/Intermission.js","Components/Playarea/Views.js","Components/Playarea/Arena.js","EndGame.js","Components/Playarea.js","Components/MainFrame.js","serviceWorker.js","index.js"],"names":["socket","Error","props","react_default","a","createElement","className","message","baseUrl","getGameIdUrl","createGameUrl","createPlayerUrl","blankGameIdMsg","Start","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getGid","state","getGameIdError","setState","new","loadingGameID","fetch","then","res","json","data","gameId","catch","join","handleChange","e","change","target","id","value","startGame","trim","username","loadingPlay","url","method","body","JSON","stringify","toLowerCase","gameIdIsInvalid","gIdInvalidMsg","userId","redirectToPlayarea","usernameIsInvalid","react_router","to","pathname","concat","starter","mode","Error_Error","title","Start_Button","onClick","role","Start_InputArea","maxLength","disabled","onChange","invalid","invalidMessage","React","Component","Button","children","InputArea","autoComplete","style","fontWeight","App","location","Start_Start","Lobby","error","emit","_this2","players","map","player","index","key","length","marginTop","src","alt","insertQuestion","insertAnswer","updateScoresUrl","Response","headerClass","status","header","image","author","source","InputQuestion","insertQuestionIntoDb","question","cb","endpoint","createQuestion","success","valid","addBlank","b","blank","slice","newText","type","rows","placeholder","resheader","resMessage","Response_Response","AnswerQuestion","insertAnsIntoDb","answer","createAnswer","response","PickFavorite","handleFaveClick","owner","updateScores","_this3","answersWithoutUser","answers","filter","ans","AfterInputQuestionIntermission","Intermission_IntermissionTemplate","AfterAnswersIntermission","AfterPickFaveIntermission","NextRoundIntermission","BeforeFinalResults","IntermissionTemplate","anims","Math","floor","random","RoundResults","answersOrdered","sort","parseInt","score","playersOrdered","splice","bucketSize","FinalResults","highScore","winners","p","includes","Arena","view","playState","InputQuestion_InputQuestion","Intermission_AfterInputQuestionIntermission","AnswerQuestion_AnswerQuestion","Intermission_AfterAnswersIntermission","PickFavorite_PickFavorite","Intermission_AfterPickFaveIntermission","Views_RoundResults","Intermission_NextRoundIntermission","Intermission_BeforeFinalResults","class","timer","EndGame","playAgain","Views_FinalResults","Playarea","handleStart","gameState","lsPlayersCB","timerCB","gameStateCB","t","gs","socketIOClient","on","pData","gsVal","paths","window","split","gId","Lobby_Lobby","Arena_Arena","EndGame_EndGame","MainFrameHeader","backgroundColor","react_router_dom","Pages","path","exact","component","Dashboard","Questions","MainFrame_GameCardContainer","MainFrame_OtherContainer","GameCardContainer","desc","game","MainFrame_GameCard","GameCard","textDecoration","OtherContainer","MainFrame_ListView","MainFrame_Input","Input","formActive","MainFrame_InputActive","close","MainFrame_InputInactive","InputActive","_this4","InputInactive","ListView","_this5","questions","_this6","q","i","MainFrame","MainFrame_MainFrameHeader","MainFrame_Pages","Boolean","hostname","match","LogRocket","init","setupLogRocketReact","ReactDOM","render","Components_MainFrame","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a618045b.chunk.js","sourcesContent":["import socketIOClient from 'socket.io-client';\r\nimport { baseUrl as endpoint } from '../Connect';\r\n// const endpoint = 'http://10.0.1.16:8080';\r\nlet socket;\r\n\r\n\r\nfunction subscribeToJoinGame(gameId, cb){\r\n    //\r\n}\r\n\r\n\r\nfunction getPlayers(gameId){\r\n    socket.emit('get-players', {gameId: gameId});\r\n}\r\n\r\n\r\nfunction initGameState(gameId, lsPlayersCB, timerCB, gameStateCB){ \r\n    socket = socketIOClient(endpoint);\r\n    socket.on('list-players', pData => lsPlayersCB(pData));\r\n    socket.on('timer', t => timerCB(t));\r\n    socket.on('game-state', gsVal => {\r\n        gameStateCB(gsVal);\r\n    });\r\n    socket.emit('join-game', {gameId: gameId});\r\n    //socket.emit('init-game-state', {gameId:gameId});\r\n}\r\n\r\n\r\nfunction updateGameState(gameId, newGameState){\r\n    socket.emit('update-game-state', {gameId:gameId, newGameState:newGameState});\r\n}\r\n\r\n\r\nfunction startGame(gameId, mode){\r\n    socket.emit('start-playing', {gameId:gameId, mode:mode});\r\n}\r\n\r\n\r\nexport { subscribeToJoinGame, initGameState, updateGameState, startGame, getPlayers };","import React from 'react';\r\n\r\nconst Error = (props) => {\r\n    return(\r\n        <div className='d-flex justify-content-center'>\r\n            <h3 className='text-danger'>\r\n                {props.message ? props : 'Whoops... Something went wrong'}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Error };","const prod = true;\r\nconst baseUrl = prod ? 'https://gameboard-238222.appspot.com' : 'http://10.0.1.16:8080';\r\nconst getGameIdUrl = '/api/get/gameId';\r\nconst createGameUrl = '/api/create/newGame';\r\nconst createPlayerUrl = '/api/create/player';\r\n\r\nexport { baseUrl, getGameIdUrl, createGameUrl, createPlayerUrl };","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { baseUrl, getGameIdUrl, createGameUrl, createPlayerUrl } from '../ApiHandler/EndPoints';\r\nimport { Error } from '../Components/Error';\r\nconst blankGameIdMsg = 'Gotta have a Game ID';\r\n\r\nexport default class Start extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            new: false,\r\n            gameId: this.props.gameId || '',\r\n            username: '',\r\n            redirectToPlayarea: null,\r\n            gameIdIsInvalid: false,\r\n            gIdInvalidMsg: blankGameIdMsg,\r\n            usernameIsInvalid: false,\r\n            loadingPlay: false,\r\n            getGameIdError: false,\r\n            loadingGameID: false\r\n        };\r\n    }\r\n\r\n    getGid = () => {\r\n        if(this.state.getGameIdError){ this.setState({getGameIdError:false}); }\r\n        if(!this.state.new){\r\n            this.setState({loadingGameID:true});\r\n            fetch(baseUrl+getGameIdUrl)\r\n            .then(res => res.json())\r\n            .then(data => this.setState({gameId:data['gameId'], new:true, loadingGameID:false}))\r\n            .catch(()=>this.setState({getGameIdError:true, loadingGameID:false}));\r\n        }\r\n    }\r\n\r\n    join = () => {\r\n        this.setState({getGameIdError:false});\r\n        if(this.state.new){\r\n            this.setState({\r\n                gameId: '',\r\n                new: false\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        if(e.target.id==='gameId'){\r\n            change['gameIdIsInvalid'] = false;\r\n        }\r\n        if(e.target.id==='username'){\r\n            change['usernameIsInvalid'] = false;\r\n        }   \r\n        this.setState(change);\r\n    }\r\n\r\n    startGame = () => {\r\n        if((this.state.gameId.trim()==='') || (this.state.username.trim()==='')){\r\n            this.setState({\r\n                gameIdIsInvalid: (this.state.gameId.trim()===''),\r\n                usernameIsInvalid: (this.state.username.trim()===''),\r\n                gIdInvalidMsg: blankGameIdMsg\r\n            });\r\n            return;\r\n        } else{\r\n            this.setState({loadingPlay:true});\r\n            const url = baseUrl + (this.state.new ? createGameUrl : createPlayerUrl);\r\n            fetch(url, {\r\n                'method':'POST',\r\n                'body': JSON.stringify({\r\n                    gameId: this.state.gameId.toLowerCase().trim(), \r\n                    username: this.state.username.trim()\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if('error' in data){\r\n                    this.setState({gameIdIsInvalid:true, gIdInvalidMsg:data['error'], loadingPlay:false});\r\n                } else{\r\n                    this.setState({\r\n                        userId:data['userId'], \r\n                        redirectToPlayarea:true\r\n                    });\r\n                }\r\n            })\r\n            .catch(() => this.setState({redirectToPlayarea:false}));\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.redirectToPlayarea!==null){\r\n            if(this.state.redirectToPlayarea){\r\n                return (\r\n                    <Redirect \r\n                        to={{\r\n                            pathname:`/play/${this.state.gameId.toLowerCase().trim()}`,\r\n                            state: { \r\n                                username: this.state.username, \r\n                                starter:this.state.new, \r\n                                userId:this.state.userId,\r\n                                gameId:this.state.gameId,\r\n                                mode: this.props.mode\r\n                             }\r\n                        }}/>\r\n                );\r\n            } else { return ( <Error /> ); }\r\n        }\r\n\r\n        let title = ''\r\n        if(this.props.mode==='free'){\r\n            title = 'Free Play'\r\n        } else if(this.props.mode==='community'){\r\n            title = 'Community Play'\r\n        }\r\n        return(\r\n            <div>\r\n                <h3>{title}</h3>\r\n                {this.state.getGameIdError &&\r\n                <p className='text-danger'>Could not get a new Game ID.</p>}\r\n                <div className='d-flex justify-content-between my-3'>\r\n                <Button\r\n                        onClick={this.getGid}\r\n                        className='btn btn-lg btn-primary'>\r\n                        {this.state.loadingGameID ? (\r\n                            <div className='spinner-border' role='status'>\r\n                                <span className='sr-only'>Loading...</span>\r\n                            </div>\r\n                        ): 'New Game'}\r\n                    </Button>\r\n                    <Button\r\n                        onClick={this.join}\r\n                        className='btn btn-lg btn-primary'>\r\n                        Join\r\n                    </Button>\r\n                </div>\r\n                <InputArea \r\n                    title='Game ID'\r\n                    id='gameId'\r\n                    maxLength='5'\r\n                    disabled={this.state.new}\r\n                    value={this.state.gameId}\r\n                    onChange={this.handleChange}\r\n                    invalid={this.state.gameIdIsInvalid}\r\n                    invalidMessage={this.state.gIdInvalidMsg} />\r\n                <InputArea \r\n                    title='Username'\r\n                    id='username'\r\n                    maxLength='31'\r\n                    disabled={false}\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                    invalid={this.state.usernameIsInvalid}\r\n                    invalidMessage='Please enter a username'/>\r\n                <div className='my-3'>\r\n                    <Button\r\n                        onClick={this.startGame}\r\n                        className='btn btn-warning btn-lg'>\r\n                        {this.state.loadingPlay ? (\r\n                            <div className='spinner-border' role='status'>\r\n                                <span className='sr-only'>Loading...</span>\r\n                            </div>\r\n                        ) : 'Play!'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst Button = (props) => {\r\n    return(\r\n        <button\r\n            onClick={props.onClick}\r\n            className={props.className}>\r\n            {props.children}\r\n        </button>\r\n    );\r\n}\r\n\r\nconst InputArea = (props) => {\r\n    return(\r\n        <div className='my-2'>\r\n            <h5>{props.title}</h5>\r\n            <input\r\n                id={props.id}\r\n                maxLength={props.maxLength}\r\n                disabled={props.disabled}\r\n                value={props.value} \r\n                onChange={props.onChange}\r\n                autoComplete='off'\r\n                className={`form-control ${props.invalid && 'is-invalid'}`}\r\n                style={{fontWeight:'bold'}} />\r\n            {props.invalid && \r\n                <div className='invalid-feedback'>{props.invalidMessage}</div>}\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\r\nimport Start from './Components/Start';\r\n\r\n\r\nclass App extends Component {\r\n  render(){\r\n    const gameId = this.props.location.state==null ? null : this.props.location.state.gameId;\r\n    const mode = this.props.location.state==null ? 'free' : this.props.location.state.mode;\r\n    return(\r\n      <div className='container mb-2 mt-2'>\r\n        <Start \r\n          gameId={gameId}\r\n          mode={mode} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const prod = true;\r\nconst baseUrl = prod ? 'https://gameboard-238222.appspot.com/' : 'http://10.0.1.16:8080';\r\n\r\nexport { baseUrl };","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {  getPlayers } from './socketConnect';\r\n\r\nexport default class Lobby extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            error: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        getPlayers(this.props.gameId);\r\n    }\r\n\r\n    render(){\r\n        if(this.state.error){ return(<Redirect to='/error' />); }\r\n\r\n        // const anims = ['heartBeat', 'jello', 'wobble', 'tada', 'swing', 'shake', 'bounce', 'flash', 'pulse', 'rubberBand'];\r\n        const players = this.props.players || [];\r\n        return(\r\n            <div id='lobby-container'>\r\n                <h3>Welcome to the Lobby</h3>\r\n                <h5>Currently in the lobby:</h5>\r\n                {players.map((player, index) => \r\n                <div key={player.id}>\r\n                    <h2 \r\n                        className={(index===players.length-1) && 'animated bounceInUp'}>\r\n                        {player.username}</h2>\r\n                </div>)}\r\n                {this.props.starter &&\r\n                <div style={{marginTop:'2em'}}>\r\n                    <h6 className='d-flex justify-content-center'>\r\n                        With great power comes great responsibility\r\n                    </h6>\r\n                    <div className='d-flex justify-content-center'>\r\n                        <button \r\n                            onClick={() => this.props.startGame('inputQuestions')}\r\n                            className='btn btn-warning py-2'>\r\n                            Click this once everyone is in the lobby!\r\n                        </button>\r\n                    </div>\r\n                </div>}\r\n                <div className='text-center py-2'>\r\n                    <img \r\n                        src='https://media.giphy.com/media/26DNhSJnqWFdgPgMo/giphy.gif'\r\n                        alt='doggo'\r\n                        className='img-fluid' />\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// const endpoint = 'http://127.0.0.1:8080';\r\nimport { baseUrl as endpoint } from './EndPoints'\r\n// const endpoint = 'http://10.0.1.16:8080';\r\nconst insertQuestion = '/api/create/question';\r\nconst insertAnswer = '/api/create/answer';\r\nconst updateScoresUrl = '/api/update/scores';\r\nconst getGameIdUrl = '/api/get/gameId';\r\n\r\n\r\nfunction commonGet(url, cb, err){\r\n    fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => cb(data))\r\n        .catch(() => err());\r\n}\r\n\r\n\r\nfunction getGameId(cb){\r\n    commonGet(endpoint+getGameIdUrl, cb);\r\n}\r\n\r\n\r\nfunction updateScores(data, cb){\r\n    fetch(endpoint+updateScoresUrl, {\r\n            'method':'POST',\r\n            'body': JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                if(res.status===200){\r\n                    cb(true);\r\n                } else { cb(false); }\r\n            })\r\n            .catch(() => cb(false));\r\n}\r\n\r\nfunction createQuestion(data, cb){\r\n    fetch(endpoint+insertQuestion, {\r\n            'method':'POST',\r\n            'body': JSON.stringify(data)\r\n        })\r\n            .then(res => {\r\n                if(res.status===200){\r\n                    cb(true);\r\n                } else { cb(false); }\r\n            })\r\n            .catch(() => cb(false));\r\n}\r\n\r\nfunction createAnswer(data, cb){\r\n    fetch(endpoint+insertAnswer, {\r\n        'method':'POST',\r\n        'body': JSON.stringify(data)\r\n    })\r\n        .then(res => {\r\n            if(res.status===200){\r\n                cb(true);\r\n            } else { cb(false); }\r\n        })\r\n        .catch(() => cb(false));\r\n}\r\n\r\n\r\nexport { createQuestion, createAnswer, updateScores, getGameId };","import React from 'react';\r\n\r\nconst Response = (props) => {\r\n    const headerClass = props.status ? 'text-success' : 'text-danger';\r\n    const style = 'text-center py-2';\r\n    return(\r\n        <div>\r\n            <div className={style}>\r\n                <h2 className={headerClass}>{props.header}</h2>\r\n            </div>\r\n            {!props.status && <div className={style}>\r\n                <h5>{props.message}</h5>\r\n            </div>}\r\n            <div className={style}>\r\n                <h5 className='animated infinite pulse'>\r\n                    Just waiting on the others :)\r\n                </h5>\r\n            </div>\r\n            {props.image && <div>\r\n                <div className={style}>\r\n                    <img \r\n                        src={props.image}\r\n                        alt='gif4u'\r\n                        className='img-fluid' />\r\n                </div>\r\n                <p className='text-muted'>\r\n                    <small>via {props.author} on {props.source}</small>\r\n                </p>\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Response }","import React from 'react';\r\nimport { createQuestion } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\nimport { Response } from '../Responses/Response';\r\n\r\nexport default class InputQuestion extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            valid: true,\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        change['valid'] = true;\r\n        this.setState(change);\r\n    }\r\n\r\n    insertQuestionIntoDb = () => {\r\n        if(!this.state.question){\r\n            this.setState({valid:false});\r\n            return;\r\n        }\r\n        const data = {\r\n            gameId:this.props.gameId,\r\n            question:this.state.question,\r\n            userId:this.props.userId\r\n        };\r\n        createQuestion(data, res => this.setState({success:res}));\r\n    }\r\n\r\n    addBlank = () => {\r\n        const b = '______';\r\n        if(this.state.question.length===0){\r\n            this.setState({question:b});\r\n        }else{\r\n            const blank = (this.state.question.slice(-1) === ' ') ? b : (' ' + b);\r\n            const newText = this.state.question+blank;\r\n            this.setState({question: newText});\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        if(this.state.success===null){  \r\n            return(\r\n                <div>\r\n                    <div className='d-flex justify-content-center'>\r\n                        <h4>Add a question for everyone to answer</h4>\r\n                    </div>\r\n                    <div>\r\n                        <textarea \r\n                            id='question'\r\n                            type='text'\r\n                            rows='3'\r\n                            maxLength='255'\r\n                            value={this.state.question}\r\n                            onChange={this.handleChange}\r\n                            placeholder='Enter your question'\r\n                            className={this.state.valid ? 'form-control' : 'form-control is-invalid'}\r\n                            style={{fontWeight:'bold'}} />\r\n                        {!this.state.valid && <div className='invalid-feedback'>\r\n                            Gotta add a little bit of text\r\n                        </div>}\r\n                    </div>\r\n                    <div className='d-flex justify-content-between py-2'>\r\n                        <button className='btn btn-info w-50 py-2' onClick={this.insertQuestionIntoDb}>\r\n                            Add question\r\n                        </button>\r\n                        <button className='btn btn-secondary py-2' onClick={this.addBlank}>\r\n                            Add blank\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? '' : 'There was an issue adding your question.';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/l0MYBzykeuHzLef3G/giphy.gif'\r\n                    author='Karo Rigaud'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { createAnswer } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\nimport { Response } from '../Responses/Response';\r\n\r\n\r\nexport default class AnswerQuestion extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            answer: '',\r\n            valid: true,\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        change['valid'] = true;\r\n        this.setState(change);\r\n    }\r\n\r\n    insertAnsIntoDb = () => {\r\n        if(!this.state.answer){\r\n            this.setState({valid:false});\r\n            return;\r\n        }\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            answer: this.state.answer,\r\n            userId: this.props.userId\r\n        };\r\n        createAnswer(data, response => this.setState({success:response}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        const style='d-flex justify-content-center py-2';\r\n        if(this.state.success===null){\r\n            return(\r\n                <div>\r\n                    <div className='pt-1'>\r\n                        <h4>{this.props.question}</h4>\r\n                    </div>\r\n                    <div className={style}>\r\n                        <textarea \r\n                            id='answer'\r\n                            type='text'\r\n                            rows='3'\r\n                            maxLength='255'\r\n                            value={this.state.answer}\r\n                            onChange={this.handleChange}\r\n                            placeholder='Enter your answer'\r\n                            className={this.state.valid ? 'form-control' : 'form-control is-invalid'}\r\n                            style={{fontWeight:'bold'}} />\r\n                        {!this.state.valid && <div className='invalid-feedback'>\r\n                            Gotta add a little bit of text\r\n                        </div>}\r\n                    </div>\r\n                    <div className='py-2'>\r\n                        <button className='btn btn-info w-50 py-2' onClick={this.insertAnsIntoDb}>\r\n                            Add your answer!\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? '' : 'There was an issue adding your question :(';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/3ohzgD1wRxpvpkDCSI/giphy.gif'\r\n                    author='Chris Gannon'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport { Response } from '../Responses/Response';\r\nimport { updateScores } from '../../ApiHandler/FetchHandler';\r\nimport { baseUrl } from '../../ApiHandler/EndPoints';\r\n\r\n\r\nexport default class PickFavorite extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            success: null\r\n        };\r\n    }\r\n\r\n    handleFaveClick = (owner) => {\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: owner\r\n        };\r\n        updateScores(data,  res => this.setState({success:res}));\r\n    }\r\n\r\n    componentDidMount(){\r\n        const data = {\r\n            gameId: this.props.gameId,\r\n            userId: this.props.userId\r\n        }\r\n        fetch(`${baseUrl}/api/isFinished`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => data['finished'] && this.setState({success:true}))\r\n        .catch(() => this.setState({success:false}));\r\n    }\r\n\r\n    render(){\r\n        const answersWithoutUser = this.props.answers.filter(answer => answer.owner!==this.props.userId);\r\n\r\n        if(this.state.success===null){\r\n            return(\r\n                <div>\r\n                    <h4 className='my-2'>\r\n                        {this.props.question}\r\n                    </h4>\r\n                    <div className='py-2 w-100'>\r\n                        {answersWithoutUser.map(ans =>\r\n                            <button \r\n                                key={ans.owner}\r\n                                className='btn btn-outline-success btn-lg my-2 w-100'\r\n                                onClick={() => this.handleFaveClick(ans.owner)}>\r\n                                    {ans.answer}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else{\r\n            const resheader = this.state.success ? 'Success!' : 'Whoops...';\r\n            const resMessage = this.state.success ? 'May the votes be ever in your favor' : 'There was an issue adding your answer.';\r\n            return(\r\n                <Response \r\n                    status={this.state.success}\r\n                    header={resheader}\r\n                    message={resMessage}\r\n                    image='https://media.giphy.com/media/l0HlyONUJlDBrv6iQ/giphy.gif'\r\n                    author='joelplosz'\r\n                    source='GIPHY' />\r\n            );\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n// Another good analyzing results animation https://media.giphy.com/media/l0HlyONUJlDBrv6iQ/giphy.gif","import React from 'react';\r\n\r\n\r\nconst AfterInputQuestionIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Nice questions!'\r\n            body=\"Let the games begin.\" />\r\n    );\r\n}\r\n\r\nconst AfterAnswersIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header=\"Think you're funny?\"\r\n            body=\"We will see...\" />\r\n    );\r\n}\r\n\r\nconst AfterPickFaveIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header=\"Let's see what everyone thought\" />\r\n    );\r\n}\r\n\r\nconst NextRoundIntermission = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Get ready for the next round'\r\n            image='https://media.giphy.com/media/xULW8OB67sl1MTjH32/giphy.gif' />\r\n    );\r\n}\r\n\r\nconst BeforeFinalResults = (props) => {\r\n    return(\r\n        <IntermissionTemplate \r\n            header='Calculating the final results'\r\n            image='https://media.giphy.com/media/Y6Hj3kY0d8OYw/giphy.gif'/>\r\n    );\r\n}\r\n\r\nconst IntermissionTemplate = (props) => {\r\n    // off centered because of existing text/divs\r\n    const style = 'text-center py-2';\r\n    const anims = [\r\n        'bounceOut',\r\n        'bounceOutDown',\r\n        'bounceOutLeft',\r\n        'bounceOutUp',\r\n        'fadeOutUpBig',\r\n        'flipOutX',\r\n        'rotateOutUpLeft',\r\n        'rotateOutUpRight',\r\n        'slideOutUp',\r\n        'slideOutDown',\r\n        'slideOutLeft',\r\n        'slideOutRight',\r\n        'zoomOut',\r\n        'zoomOutUp',\r\n        'zoomOutDown',\r\n        'zoomOutLeft',\r\n        'zoomOutRight',\r\n        'hinge'\r\n    ];\r\n    \r\n    return(\r\n        <div>\r\n            {props.header &&\r\n                <div className={style}>\r\n                    <h2 className={`animated ${anims[Math.floor(Math.random()*anims.length)]} delay-2s text-info`}>{props.header}</h2>\r\n                </div>}\r\n            {props.body &&\r\n                <div className={style}>\r\n                    <h5>{props.body}</h5>\r\n                </div>}\r\n            {props.image &&\r\n                <div className={style}>\r\n                    <img \r\n                        src={props.image}\r\n                        alt='gif4u'\r\n                        className='img-fluid' />\r\n                </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { \r\n    AfterInputQuestionIntermission, \r\n    AfterAnswersIntermission, \r\n    AfterPickFaveIntermission,\r\n    NextRoundIntermission,\r\n    BeforeFinalResults\r\n}","// stateless functional components\r\nimport React from 'react';\r\n\r\nconst RoundResults = (props) => {\r\n    const answersOrdered = props.answers.sort((a, b) => parseInt(b.score) - parseInt(a.score));\r\n    const playersOrdered = props.players.sort((a,b) => parseInt(b.score) - parseInt(a.score));\r\n    const anims = ['bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp'];\r\n    if(anims.length > answersOrdered.length){\r\n        anims.splice(answersOrdered.length);\r\n    }\r\n    const bucketSize = answersOrdered.length/anims.length;\r\n\r\n    return(\r\n        <div>\r\n            <h4 className='my-2'>{props.question}</h4>\r\n            <div className='my-2 py-2'>\r\n                <h6 className='text-muted'>Favorite Answers</h6>\r\n                {answersOrdered.map((answer, index) => \r\n                    <div key={answer.owner} className={`animated\r\n                                                        ${anims[Math.floor(index/bucketSize)]}\r\n                                                        delay-${Math.floor((answersOrdered.length-index-1)/bucketSize)}s\r\n                                                        d-flex justify-content-between my-2`}>\r\n                        <h3>{answer.answer}</h3>\r\n                        <h3>{answer.score}</h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='mt-4 py-2'>\r\n                <h6 className='text-info'>Current Standings</h6>\r\n                {playersOrdered.map((player, index) => \r\n                    <div key={player.id} className={`animated\r\n                                                    ${anims[Math.floor(index/bucketSize)]}\r\n                                                    delay-${Math.floor((answersOrdered.length-index-1)/bucketSize)}s\r\n                                                    d-flex justify-content-between my-2`}>\r\n                        <h5 className='text-success'>{player.username}</h5>\r\n                        <h5 className='text-success'>{player.score}</h5>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst FinalResults = (props) => {\r\n    const playersOrdered = props.players.sort((a,b) => parseInt(b.score) - parseInt(a.score));\r\n    const anims = ['bounceInDown', 'bounceInLeft', 'bounceInRight', 'bounceInUp'];\r\n    if(anims.length > playersOrdered.length){\r\n        anims.splice(playersOrdered.length);\r\n    }\r\n    const bucketSize = playersOrdered.length/anims.length;\r\n    const highScore = playersOrdered[0].score;\r\n    const winners = playersOrdered.filter(p => p.score===highScore).map(p => p.id);\r\n    return(\r\n        <div>\r\n            <div className='py-2'>\r\n                <h4>Final Results!</h4>\r\n                {playersOrdered.map((player, index) => \r\n                    <div key={player.id} className={`animated\r\n                                                    ${anims[Math.floor(index/bucketSize)]}\r\n                                                    delay-${Math.floor((playersOrdered.length-index-1)/bucketSize)}s\r\n                                                    d-flex justify-content-between my-2`}>\r\n                        <h3>{player.username}</h3>\r\n                        <h3>{player.score}</h3>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className='text-center py-2'>\r\n                <h4>Thanks for playing!!</h4>\r\n            </div>\r\n            {winners.includes(props.userId) && <div className='text-center py-2'>\r\n                <img \r\n                    src='https://media.giphy.com/media/fdPrizLgIwnc8dHhJR/giphy.gif'\r\n                    alt='winner'\r\n                    className='img-fluid' />\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { RoundResults, FinalResults }","import React from 'react';\r\nimport InputQuestion from './InputQuestion';\r\nimport AnswerQuestion from './AnswerQuestion';\r\nimport PickFavorite from './PickFavorite';\r\nimport { \r\n    AfterInputQuestionIntermission, \r\n    AfterAnswersIntermission,\r\n    AfterPickFaveIntermission,\r\n    NextRoundIntermission,\r\n    BeforeFinalResults \r\n} from '../Playarea/Intermission';\r\nimport { RoundResults } from '../Playarea/Views';\r\nimport { Error } from '../Error';\r\n\r\nexport default class Arena extends React.Component{\r\n    render(){\r\n        let view;\r\n        const playState = this.props.playState;\r\n\r\n        if(!playState){\r\n            view = (\r\n                <div>\r\n                    <p>Loading...</p>\r\n                    <div className='spinner-border' role='status'>\r\n                        <span class='sr-only'>Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if(playState==='inputQuestions'){\r\n            view = (<InputQuestion \r\n                    gameId={this.props.gameId}\r\n                    userId={this.props.userId} />);\r\n        } else if(playState==='afterQuestionIntermission'){\r\n            view = (<AfterInputQuestionIntermission />);\r\n        } else if(playState==='answerQuestion'){\r\n            view = (<AnswerQuestion\r\n                    gameId={this.props.gameId}\r\n                    question={this.props.question}\r\n                    userId={this.props.userId} />);\r\n        } \r\n        else if(playState==='afterAnswerIntermission'){\r\n            view = (<AfterAnswersIntermission />);\r\n        }\r\n        else if(playState==='pickFavoriteAnswer'){\r\n            view = (<PickFavorite\r\n                    question={this.props.question}\r\n                    gameId={this.props.gameId}\r\n                    userId={this.props.userId}\r\n                    answers={this.props.answers} />);\r\n        }\r\n        else if(playState==='afterPickIntermission'){\r\n            view = (<AfterPickFaveIntermission />);\r\n        } \r\n        else if(playState==='roundResults'){\r\n            view = (<RoundResults \r\n                    question={this.props.question}\r\n                    answers={this.props.answers}\r\n                    players={this.props.players} />);\r\n        } \r\n        else if(playState==='nextRound'){\r\n            view = (<NextRoundIntermission />);\r\n        }\r\n        else if(playState==='beforeFinalIntermission'){\r\n            view = (<BeforeFinalResults />);\r\n        } \r\n        else { view = (<Error />); }\r\n\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <h3>{this.props.timer}</h3>\r\n                </div>\r\n                <div>{view}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { FinalResults } from './Components/Playarea/Views';\r\n\r\n\r\nexport default class EndGame extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            playAgain: false\r\n        };\r\n    }\r\n\r\n    render(){\r\n        if(this.state.playAgain){\r\n            return( <Redirect to='/'/> );\r\n        }\r\n        return(\r\n            <div>\r\n                <div className='d-flex justify-content-end my-2'>\r\n                    <button\r\n                        onClick={() => this.setState({playAgain:true})}\r\n                        className='btn btn-warning'>Play again?</button>\r\n                </div>\r\n                <FinalResults \r\n                    userId={this.props.userId}\r\n                    players={this.props.players} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {  Redirect } from 'react-router-dom';\r\nimport Lobby from './Playarea/Lobby';\r\nimport Arena from './Playarea/Arena';\r\nimport { initGameState, startGame } from './Playarea/socketConnect';\r\nimport EndGame from '../EndGame';\r\n\r\n// const playStates = ['inputQuestions', 'answerQuestion', 'pickFavoriteAnswer'];\r\n\r\nexport default class Playarea extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            gameState: null,\r\n            error: false,\r\n            question: null,\r\n            answers: [],\r\n            players: [],\r\n            timer: null\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.location.state==null){\r\n            return;\r\n        }\r\n        initGameState(\r\n            this.props.location.state.gameId, \r\n            p => this.setState({players:p}),\r\n            t => this.setState({timer:t['currentTime']}),\r\n            gs => this.setState({\r\n                gameState:gs['currentState'], \r\n                question:gs['question'], \r\n                answers:gs['answers'],\r\n                players:gs['players']\r\n            })\r\n        );\r\n    }\r\n\r\n    handleStart = () => {\r\n        //updateGameState(this.props.location.state.gameId, 'play');\r\n        startGame(this.props.location.state.gameId, this.props.location.state.mode);\r\n    }\r\n\r\n    render(){\r\n        const playStates = [\r\n            'inputQuestions',\r\n            'afterQuestionIntermission',\r\n            'answerQuestion',\r\n            'afterAnswerIntermission',\r\n            'pickFavoriteAnswer',\r\n            'afterPickIntermission',\r\n            'roundResults',\r\n            'nextRound',\r\n            'beforeFinalIntermission'\r\n        ];\r\n        if(this.props.location.state==null || this.state.error){ \r\n            const paths = window.location.pathname.split('/');\r\n            const gId = paths[paths.length-1].trim();\r\n            return(\r\n                <Redirect \r\n                        to={{\r\n                            pathname:'/join',\r\n                            state: { \r\n                                gameId: gId\r\n                            }\r\n                        }}/>\r\n            ); \r\n        } //if they didn't come from the login screen\r\n\r\n        let view;\r\n        if(this.state.gameState===null){\r\n            view = (\r\n                <div>\r\n                    <p>Getting everything ready</p>\r\n                    <div className='spinner-border' role='status'>\r\n                        <span className='sr-only'>Loading...</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } \r\n        else {\r\n            if(this.state.gameState==='startLobby'){\r\n                view =  (\r\n                    <Lobby \r\n                        players={this.state.players}\r\n                        gameId={this.props.location.state.gameId}\r\n                        starter={this.props.location.state.starter}\r\n                        startGame={this.handleStart} />\r\n                );\r\n            } \r\n            else if(playStates.includes(this.state.gameState)){ //this.state.gameState==='inputQuestions'\r\n                view =  (\r\n                    <Arena \r\n                        question={this.state.question}\r\n                        answers={this.state.answers}\r\n                        players={this.state.players}\r\n                        timer={this.state.timer}\r\n                        playState={this.state.gameState}\r\n                        userId={this.props.location.state.userId}\r\n                        gameId={this.props.location.state.gameId} />\r\n                );\r\n            }\r\n            else if(this.state.gameState==='finalResults'){\r\n                view = (\r\n                    <EndGame \r\n                        userId={this.props.location.state.userId}\r\n                        players={this.state.players} />\r\n                );\r\n            }\r\n            else {\r\n                view = (\r\n                    <div>Hm... Something went wrong...</div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <div className='container'>\r\n                    <div className='p-2'>\r\n                        {view}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport { Error } from '../Components/Error';\r\nimport App from '../App';\r\nimport Playarea from './Playarea';\r\nimport { baseUrl } from '../ApiHandler/EndPoints';\r\n\r\n\r\nconst MainFrame = () => {\r\n    return(\r\n        <Router>\r\n            <MainFrameHeader />\r\n            <Pages />\r\n        </Router>\r\n    );\r\n}\r\n\r\nconst MainFrameHeader = () => {\r\n    return(\r\n        <div \r\n            className='d-flex justify-content-center p-1'\r\n            style={{backgroundColor:'#000000'}}>\r\n            <Link to='/'><h5 className='text-muted'>Gameboard</h5></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Pages = () => {\r\n    return(\r\n        <Switch>\r\n            <Route path='/' exact component={Dashboard} />\r\n            <Route path='/join' component={App} />\r\n            <Route path='/play/:gameId' component={Playarea} />\r\n            <Route path='/other/questions' component={Questions} />\r\n            <Route path='/error' component={Error} />\r\n        </Switch>\r\n    );\r\n}\r\n\r\nconst Dashboard = () => {\r\n    return(\r\n        <div className='container mb-2 mt-2'>\r\n            <GameCardContainer />\r\n            <OtherContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst GameCardContainer = () => {\r\n    const games = [\r\n        {\r\n            title: 'Free Play',\r\n            desc: 'Play with questions from you and your friends!',\r\n            mode:'free'\r\n        },\r\n        {\r\n            title: 'Community Questions',\r\n            desc: 'Play with 5 questions from the community! (Recommended for first timers or people looking for inspiration)',\r\n            mode:'community'\r\n        },\r\n    ];\r\n    return(\r\n        <div>\r\n            <h4>Games</h4>\r\n            <div className='row'>\r\n                {games.map(game => \r\n                    <GameCard \r\n                        key={game.mode}\r\n                        title={game.title}\r\n                        desc={game.desc}\r\n                        mode={game.mode} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst GameCard = (props) => {\r\n    return(\r\n        <div className='col-lg-4 col-md-6'>\r\n            <div className='card text-white bg-success mb-3'>\r\n                <div className='card-header'>{props.title}</div>\r\n                <div className='card-body'>\r\n                    <p className='card-text'>{props.desc}</p>\r\n                    <button className='btn btn-secondary'>\r\n                        <Link\r\n                            to={{\r\n                                pathname:'/join',\r\n                                state: { mode: props.mode }\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}>Play!</Link>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst OtherContainer = () => {\r\n    return(\r\n        <div>\r\n            <h4>Other</h4>\r\n            <Link to='/other/questions'>View or Add a question to the community list.</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Questions = () => {\r\n    return(\r\n        <div className='container mt-2 mb-2'>\r\n            <ListView />\r\n            <Input />\r\n        </div>\r\n    );\r\n}\r\n \r\nclass Input extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            formActive: false\r\n        };\r\n    }\r\n\r\n    render(){\r\n        if(this.state.formActive){\r\n            return (<InputActive close={()=>this.setState({formActive:false})}/>);\r\n        }\r\n        return (<InputInactive onClick={()=>this.setState({formActive:true})}/>);\r\n    }\r\n}\r\n\r\nclass InputActive extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            question: '',\r\n            valid: true,\r\n            message: null\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.state.message &&\r\n                <div onClick={()=>this.setState({message:null})} className=\"alert alert-dismissible alert-secondary\">\r\n                    <button type=\"button\" className=\"close\">&times;</button>\r\n                    {this.state.message}\r\n                </div>}\r\n                <textarea \r\n                    id='question'\r\n                    type='text'\r\n                    rows='3'\r\n                    maxLength='255'\r\n                    value={this.state.question}\r\n                    onChange={this.handleChange}\r\n                    placeholder='Enter your question'\r\n                    className={this.state.valid ? 'form-control' : 'form-control is-invalid'}\r\n                    style={{fontWeight:'bold'}} />\r\n                {!this.state.valid && <div className='invalid-feedback'>\r\n                    Gotta add a little bit of text\r\n                </div>}\r\n                <div className='d-flex justify-content-between'>\r\n                    <button className='btn btn-info py-2 mt-2' onClick={this.insertQuestionIntoDb}>\r\n                        Add question\r\n                    </button>\r\n                    <button className='btn btn-danger py-2 mt-2' onClick={this.props.close}>\r\n                        Nevermind\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {};\r\n        change[e.target.id] = e.target.value;\r\n        change['valid'] = true;\r\n        this.setState(change);\r\n    }\r\n\r\n    insertQuestionIntoDb = () => {\r\n        if(!this.state.question){\r\n            this.setState({valid:false});\r\n            return;\r\n        }\r\n        const data = {\r\n            question:this.state.question\r\n        };\r\n\r\n        fetch(`${baseUrl}/api/create/community-q`, {\r\n            'method': 'POST',\r\n            'body': JSON.stringify(data)\r\n        })\r\n        .then(res => {\r\n            if(res.status===200){\r\n                this.setState({message:'Success!  Thanks for the question.  We will review and approve it if it offends less than 50% of millenials.'});\r\n            } else {\r\n                this.setState({message:\"Whoops!  Your question not added.  We'll make sure to fire the developer responsible.\"});\r\n            }\r\n        }).catch(()=>this.setState({message:\"Whoops!  Your question not added.  We'll make sure to fire the developer responsible.\"}));\r\n        this.setState({question:'', valid: true});\r\n    }\r\n}\r\n\r\nconst InputInactive = (props) => {\r\n    //\r\n    return(\r\n        <div>\r\n            <button\r\n                onClick={props.onClick} \r\n                className='btn btn-success'>\r\n                Add a question\r\n            </button>\r\n            <p>\r\n                Add a question to be reviewed and submit to the list of community questions.\r\n                <p className='text-muted'>\r\n                    (We are currently working on a feature to save your favorite questions and view other favorite lists \r\n                    but until then please support the community list!)\r\n                </p>\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass ListView extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            questions: [\"These are not the questions you're looking for.\"]\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`${baseUrl}/api/read/community-qs`)\r\n        .then(res => res.json())\r\n        .then(questions => this.setState({questions}));\r\n    }\r\n\r\n    render(){\r\n        const questions = this.state.questions;\r\n        return(\r\n            <div>\r\n                <h4>Here's a sample of some of the community questions.</h4>\r\n                {questions.map((q, i) => <p>{i+1}. {q}</p>)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainFrame;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainFrame from './Components/MainFrame';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport LogRocket from 'logrocket';\r\nimport setupLogRocketReact from 'logrocket-react';\r\n\r\nLogRocket.init('rjjdn7/gameboard-prod');\r\nsetupLogRocketReact(LogRocket);\r\n\r\nReactDOM.render(<MainFrame />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}